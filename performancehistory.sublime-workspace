{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "app/scripts/modules/search-controls.js",
			"settings":
			{
				"buffer_size": 3933,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/main.js",
			"settings":
			{
				"buffer_size": 479,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/mbowen/projects/hpi/trunk/code/app/main.js",
			"settings":
			{
				"buffer_size": 4649,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/modules/search.js",
			"settings":
			{
				"buffer_size": 7672,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<VirtualHost *:80>\n        ServerName ascpedia.ascp.org\n        ServerAlias ascpedia.ascp.org\n\n        Header set Access-Control-Allow-Origin \"*\"\n        Header set Access-Control-Allow-Methods \"GET\"\n        Header set Access-Control-Allow-Headers \"content-type,x-requested-with\"\n\n        RewriteEngine on\n        RewriteRule ^/$ /search [PT]\n        \n        # rewrite non https requests to ascpedia.ascp.org to use https \n        RewriteCond %{HTTPS} !=on\n        RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]\n\n        <Directory />\n                Options All\n                Order Deny,Allow\n                Allow from all\n        </Directory>\n\n        ProxyRequests off\n\n        <Proxy *>\n                Order Deny,Allow\n                Allow from all\n        </Proxy>\n\n        <Location />\n                Order Deny,Allow\n                Allow from all\n        </Location>\n\n        #Proxy all requests to tomcat\n        ProxyPass / ajp://localhost:8009/ascpedia/\n\n        #ProxyPass /alfresco/service/api/node           http://alfresco.ascp.org:8009/alfresco/service/api/node\n        #ProxyPassReverse /alfresco/service/api/node    http://alfresco.ascp.org:8009/alfresco/service/api/node\n\n        #ProxyPass /alfresco ajp://alfresco.ascp.org:8009/alfresco\n</VirtualHost>\n\nNameVirtualHost *:443\n\n<VirtualHost *:443>\n        ServerName ascpedia.ascp.org\n        ServerAlias ascpedia.ascp.org\n\n        SSLEngine On\n        SSLCertificateFile /etc/httpd/conf/ssl.crt/assetlibrary.cer\n        SSLCertificateKeyFile /etc/httpd/conf/ssl.key/assetlibrary.key\n        SSLCertificateChainFile [[CHAIN FILE HERE]]\n        \n        Header set Access-Control-Allow-Origin \"*\"\n        Header set Access-Control-Allow-Methods \"GET\"\n        Header set Access-Control-Allow-Headers \"content-type,x-requested-with\"\n\n        RewriteEngine on\n        RewriteRule ^/$ /search [PT]\n\n        <Directory />\n                Options All\n                Order Deny,Allow\n                Allow from all\n        </Directory>\n\n        ProxyRequests off\n\n        <Proxy *>\n                Order Deny,Allow\n                Allow from all\n        </Proxy>\n\n        <Location />\n                Order Deny,Allow\n                Allow from all\n        </Location>\n\n        #Proxy all requests to tomcat\n        ProxyPass / ajp://localhost:8009/ascpedia/\n\n\n</VirtualHost>",
			"file": "/home/mbowen/projects/ascp/misc/ssl-apache-test.conf",
			"file_size": 2349,
			"file_write_time": 130620278417076058,
			"settings":
			{
				"buffer_size": 2349,
				"line_ending": "Unix",
				"name": "<VirtualHost *:80>"
			}
		},
		{
			"file": "app/scripts/modules/searchtypes/search-artist.js",
			"settings":
			{
				"buffer_size": 747,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/scripts/modules/searchtypes/search-program.js",
			"settings":
			{
				"buffer_size": 1831,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/bower_components/backbone.paginator/lib/backbone.paginator.js",
			"settings":
			{
				"buffer_size": 48481,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/modules/input-field-controls/abstract-control.js",
			"settings":
			{
				"buffer_size": 1189,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/scripts/modules/input-field-controls/control-dropdown.js",
			"settings":
			{
				"buffer_size": 2132,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/scripts/modules/input-field-controls/control-typeahead.js",
			"settings":
			{
				"buffer_size": 3104,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/scripts/modules/search-results.js",
			"settings":
			{
				"buffer_size": 4702,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*!\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2014 Jimmy Yuen Ho Wong and contributors <wyuenho@gmail.com>\n  Licensed under the MIT license.\n*/\n\n(function (factory) {\n\n  // CommonJS\n  if (typeof exports == \"object\") {\n    module.exports = factory(module.exports,\n                             require(\"underscore\"),\n                             require(\"backbone\"));\n  }\n  // Browser\n  else factory(this, this._, this.Backbone);\n}(function (root, _, Backbone) {\n\n  \"use strict\";\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n// Copyright 2009, 2010 Kristopher Michael Kowal\n// https://github.com/kriskowal/es5-shim\n// ES5 15.5.4.20\n// http://es5.github.com/#x15.5.4.20\nvar ws = \"\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\" +\n  \"\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\" +\n  \"\\u2029\\uFEFF\";\nif (!String.prototype.trim || ws.trim()) {\n  // http://blog.stevenlevithan.com/archives/faster-trim-javascript\n  // http://perfectionkills.com/whitespace-deviations/\n  ws = \"[\" + ws + \"]\";\n  var trimBeginRegexp = new RegExp(\"^\" + ws + ws + \"*\"),\n  trimEndRegexp = new RegExp(ws + ws + \"*$\");\n  String.prototype.trim = function trim() {\n    if (this === undefined || this === null) {\n      throw new TypeError(\"can't convert \" + this + \" to object\");\n    }\n    return String(this)\n      .replace(trimBeginRegexp, \"\")\n      .replace(trimEndRegexp, \"\");\n  };\n}\n\nfunction lpad(str, length, padstr) {\n  var paddingLen = length - (str + '').length;\n  paddingLen =  paddingLen < 0 ? 0 : paddingLen;\n  var padding = '';\n  for (var i = 0; i < paddingLen; i++) {\n    padding = padding + padstr;\n  }\n  return padding + str;\n}\n\nvar $ = Backbone.$;\n\nvar Backgrid = root.Backgrid = {\n\n  Extension: {},\n\n  resolveNameToClass: function (name, suffix) {\n    if (_.isString(name)) {\n      var key = _.map(name.split('-'), function (e) {\n        return e.slice(0, 1).toUpperCase() + e.slice(1);\n      }).join('') + suffix;\n      var klass = Backgrid[key] || Backgrid.Extension[key];\n      if (_.isUndefined(klass)) {\n        throw new ReferenceError(\"Class '\" + key + \"' not found\");\n      }\n      return klass;\n    }\n\n    return name;\n  },\n\n  callByNeed: function () {\n    var value = arguments[0];\n    if (!_.isFunction(value)) return value;\n\n    var context = arguments[1];\n    var args = [].slice.call(arguments, 2);\n    return value.apply(context, !!(args + '') ? args : []);\n  }\n\n};\n_.extend(Backgrid, Backbone.Events);\n\n/**\n   Command translates a DOM Event into commands that Backgrid\n   recognizes. Interested parties can listen on selected Backgrid events that\n   come with an instance of this class and act on the commands.\n\n   It is also possible to globally rebind the keyboard shortcuts by replacing\n   the methods in this class' prototype.\n\n   @class Backgrid.Command\n   @constructor\n */\nvar Command = Backgrid.Command = function (evt) {\n  _.extend(this, {\n    altKey: !!evt.altKey,\n    \"char\": evt[\"char\"],\n    charCode: evt.charCode,\n    ctrlKey: !!evt.ctrlKey,\n    key: evt.key,\n    keyCode: evt.keyCode,\n    locale: evt.locale,\n    location: evt.location,\n    metaKey: !!evt.metaKey,\n    repeat: !!evt.repeat,\n    shiftKey: !!evt.shiftKey,\n    which: evt.which\n  });\n};\n_.extend(Command.prototype, {\n  /**\n     Up Arrow\n\n     @member Backgrid.Command\n   */\n  moveUp: function () { return this.keyCode == 38; },\n  /**\n     Down Arrow\n\n     @member Backgrid.Command\n   */\n  moveDown: function () { return this.keyCode === 40; },\n  /**\n     Shift Tab\n\n     @member Backgrid.Command\n   */\n  moveLeft: function () { return this.shiftKey && this.keyCode === 9; },\n  /**\n     Tab\n\n     @member Backgrid.Command\n   */\n  moveRight: function () { return !this.shiftKey && this.keyCode === 9; },\n  /**\n     Enter\n\n     @member Backgrid.Command\n   */\n  save: function () { return this.keyCode === 13; },\n  /**\n     Esc\n\n     @member Backgrid.Command\n   */\n  cancel: function () { return this.keyCode === 27; },\n  /**\n     None of the above.\n\n     @member Backgrid.Command\n   */\n  passThru: function () {\n    return !(this.moveUp() || this.moveDown() || this.moveLeft() ||\n             this.moveRight() || this.save() || this.cancel());\n  }\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   Just a convenient class for interested parties to subclass.\n\n   The default Cell classes don't require the formatter to be a subclass of\n   Formatter as long as the fromRaw(rawData) and toRaw(formattedData) methods\n   are defined.\n\n   @abstract\n   @class Backgrid.CellFormatter\n   @constructor\n*/\nvar CellFormatter = Backgrid.CellFormatter = function () {};\n_.extend(CellFormatter.prototype, {\n\n  /**\n     Takes a raw value from a model and returns an optionally formatted string\n     for display. The default implementation simply returns the supplied value\n     as is without any type conversion.\n\n     @member Backgrid.CellFormatter\n     @param {*} rawData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {*}\n  */\n  fromRaw: function (rawData, model) {\n    return rawData;\n  },\n\n  /**\n     Takes a formatted string, usually from user input, and returns a\n     appropriately typed value for persistence in the model.\n\n     If the user input is invalid or unable to be converted to a raw value\n     suitable for persistence in the model, toRaw must return `undefined`.\n\n     @member Backgrid.CellFormatter\n     @param {string} formattedData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {*|undefined}\n  */\n  toRaw: function (formattedData, model) {\n    return formattedData;\n  }\n\n});\n\n/**\n   A floating point number formatter. Doesn't understand scientific notation at\n   the moment.\n\n   @class Backgrid.NumberFormatter\n   @extends Backgrid.CellFormatter\n   @constructor\n   @throws {RangeError} If decimals < 0 or > 20.\n*/\nvar NumberFormatter = Backgrid.NumberFormatter = function (options) {\n  _.extend(this, this.defaults, options || {});\n\n  if (this.decimals < 0 || this.decimals > 20) {\n    throw new RangeError(\"decimals must be between 0 and 20\");\n  }\n};\nNumberFormatter.prototype = new CellFormatter();\n_.extend(NumberFormatter.prototype, {\n\n  /**\n     @member Backgrid.NumberFormatter\n     @cfg {Object} options\n\n     @cfg {number} [options.decimals=2] Number of decimals to display. Must be an integer.\n\n     @cfg {string} [options.decimalSeparator='.'] The separator to use when\n     displaying decimals.\n\n     @cfg {string} [options.orderSeparator=','] The separator to use to\n     separator thousands. May be an empty string.\n   */\n  defaults: {\n    decimals: 2,\n    decimalSeparator: '.',\n    orderSeparator: ','\n  },\n\n  HUMANIZED_NUM_RE: /(\\d)(?=(?:\\d{3})+$)/g,\n\n  /**\n     Takes a floating point number and convert it to a formatted string where\n     every thousand is separated by `orderSeparator`, with a `decimal` number of\n     decimals separated by `decimalSeparator`. The number returned is rounded\n     the usual way.\n\n     @member Backgrid.NumberFormatter\n     @param {number} number\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string}\n  */\n  fromRaw: function (number, model) {\n    if (_.isNull(number) || _.isUndefined(number)) return '';\n\n    number = number.toFixed(~~this.decimals);\n\n    var parts = number.split('.');\n    var integerPart = parts[0];\n    var decimalPart = parts[1] ? (this.decimalSeparator || '.') + parts[1] : '';\n\n    return integerPart.replace(this.HUMANIZED_NUM_RE, '$1' + this.orderSeparator) + decimalPart;\n  },\n\n  /**\n     Takes a string, possibly formatted with `orderSeparator` and/or\n     `decimalSeparator`, and convert it back to a number.\n\n     @member Backgrid.NumberFormatter\n     @param {string} formattedData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {number|undefined} Undefined if the string cannot be converted to\n     a number.\n  */\n  toRaw: function (formattedData, model) {\n    formattedData = formattedData.trim();\n\n    if (formattedData === '') return null;\n\n    var rawData = '';\n\n    var thousands = formattedData.split(this.orderSeparator);\n    for (var i = 0; i < thousands.length; i++) {\n      rawData += thousands[i];\n    }\n\n    var decimalParts = rawData.split(this.decimalSeparator);\n    rawData = '';\n    for (var i = 0; i < decimalParts.length; i++) {\n      rawData = rawData + decimalParts[i] + '.';\n    }\n\n    if (rawData[rawData.length - 1] === '.') {\n      rawData = rawData.slice(0, rawData.length - 1);\n    }\n\n    var result = (rawData * 1).toFixed(~~this.decimals) * 1;\n    if (_.isNumber(result) && !_.isNaN(result)) return result;\n  }\n\n});\n\n/**\n   A number formatter that converts a floating point number, optionally\n   multiplied by a multiplier, to a percentage string and vice versa.\n\n   @class Backgrid.PercentFormatter\n   @extends Backgrid.NumberFormatter\n   @constructor\n   @throws {RangeError} If decimals < 0 or > 20.\n */\nvar PercentFormatter = Backgrid.PercentFormatter = function () {\n  Backgrid.NumberFormatter.apply(this, arguments);\n};\n\nPercentFormatter.prototype = new Backgrid.NumberFormatter(),\n\n_.extend(PercentFormatter.prototype, {\n\n  /**\n     @member Backgrid.PercentFormatter\n     @cfg {Object} options\n\n     @cfg {number} [options.multiplier=1] The number used to multiply the model\n     value for display.\n\n     @cfg {string} [options.symbol='%'] The symbol to append to the percentage\n     string.\n   */\n  defaults: _.extend({}, NumberFormatter.prototype.defaults, {\n    multiplier: 1,\n    symbol: \"%\"\n  }),\n\n  /**\n     Takes a floating point number, where the number is first multiplied by\n     `multiplier`, then converted to a formatted string like\n     NumberFormatter#fromRaw, then finally append `symbol` to the end.\n\n     @member Backgrid.PercentFormatter\n     @param {number} rawValue\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string}\n  */\n  fromRaw: function (number, model) {\n    var args = [].slice.call(arguments, 1);\n    args.unshift(number * this.multiplier);\n    return (NumberFormatter.prototype.fromRaw.apply(this, args) || \"0\") + this.symbol;\n  },\n\n  /**\n     Takes a string, possibly appended with `symbol` and/or `decimalSeparator`,\n     and convert it back to a number for the model like NumberFormatter#toRaw,\n     and then dividing it by `multiplier`.\n\n     @member Backgrid.PercentFormatter\n     @param {string} formattedData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {number|undefined} Undefined if the string cannot be converted to\n     a number.\n  */\n  toRaw: function (formattedValue, model) {\n    var tokens = formattedValue.split(this.symbol);\n    if (tokens && tokens[0] && tokens[1] === \"\" || tokens[1] == null) {\n      var rawValue = NumberFormatter.prototype.toRaw.call(this, tokens[0]);\n      if (_.isUndefined(rawValue)) return rawValue;\n      return rawValue / this.multiplier;\n    }\n  }\n\n});\n\n/**\n   Formatter to converts between various datetime formats.\n\n   This class only understands ISO-8601 formatted datetime strings and UNIX\n   offset (number of milliseconds since UNIX Epoch). See\n   Backgrid.Extension.MomentFormatter if you need a much more flexible datetime\n   formatter.\n\n   @class Backgrid.DatetimeFormatter\n   @extends Backgrid.CellFormatter\n   @constructor\n   @throws {Error} If both `includeDate` and `includeTime` are false.\n*/\nvar DatetimeFormatter = Backgrid.DatetimeFormatter = function (options) {\n  _.extend(this, this.defaults, options || {});\n\n  if (!this.includeDate && !this.includeTime) {\n    throw new Error(\"Either includeDate or includeTime must be true\");\n  }\n};\nDatetimeFormatter.prototype = new CellFormatter();\n_.extend(DatetimeFormatter.prototype, {\n\n  /**\n     @member Backgrid.DatetimeFormatter\n\n     @cfg {Object} options\n\n     @cfg {boolean} [options.includeDate=true] Whether the values include the\n     date part.\n\n     @cfg {boolean} [options.includeTime=true] Whether the values include the\n     time part.\n\n     @cfg {boolean} [options.includeMilli=false] If `includeTime` is true,\n     whether to include the millisecond part, if it exists.\n   */\n  defaults: {\n    includeDate: true,\n    includeTime: true,\n    includeMilli: false\n  },\n\n  DATE_RE: /^([+\\-]?\\d{4})-(\\d{2})-(\\d{2})$/,\n  TIME_RE: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d{3}))?$/,\n  ISO_SPLITTER_RE: /T|Z| +/,\n\n  _convert: function (data, validate) {\n    if ((data + '').trim() === '') return null;\n\n    var date, time = null;\n    if (_.isNumber(data)) {\n      var jsDate = new Date(data);\n      date = lpad(jsDate.getUTCFullYear(), 4, 0) + '-' + lpad(jsDate.getUTCMonth() + 1, 2, 0) + '-' + lpad(jsDate.getUTCDate(), 2, 0);\n      time = lpad(jsDate.getUTCHours(), 2, 0) + ':' + lpad(jsDate.getUTCMinutes(), 2, 0) + ':' + lpad(jsDate.getUTCSeconds(), 2, 0);\n    }\n    else {\n      data = data.trim();\n      var parts = data.split(this.ISO_SPLITTER_RE) || [];\n      date = this.DATE_RE.test(parts[0]) ? parts[0] : '';\n      time = date && parts[1] ? parts[1] : this.TIME_RE.test(parts[0]) ? parts[0] : '';\n    }\n\n    var YYYYMMDD = this.DATE_RE.exec(date) || [];\n    var HHmmssSSS = this.TIME_RE.exec(time) || [];\n\n    if (validate) {\n      if (this.includeDate && _.isUndefined(YYYYMMDD[0])) return;\n      if (this.includeTime && _.isUndefined(HHmmssSSS[0])) return;\n      if (!this.includeDate && date) return;\n      if (!this.includeTime && time) return;\n    }\n\n    var jsDate = new Date(Date.UTC(YYYYMMDD[1] * 1 || 0,\n                                   YYYYMMDD[2] * 1 - 1 || 0,\n                                   YYYYMMDD[3] * 1 || 0,\n                                   HHmmssSSS[1] * 1 || null,\n                                   HHmmssSSS[2] * 1 || null,\n                                   HHmmssSSS[3] * 1 || null,\n                                   HHmmssSSS[5] * 1 || null));\n\n    var result = '';\n\n    if (this.includeDate) {\n      result = lpad(jsDate.getUTCFullYear(), 4, 0) + '-' + lpad(jsDate.getUTCMonth() + 1, 2, 0) + '-' + lpad(jsDate.getUTCDate(), 2, 0);\n    }\n\n    if (this.includeTime) {\n      result = result + (this.includeDate ? 'T' : '') + lpad(jsDate.getUTCHours(), 2, 0) + ':' + lpad(jsDate.getUTCMinutes(), 2, 0) + ':' + lpad(jsDate.getUTCSeconds(), 2, 0);\n\n      if (this.includeMilli) {\n        result = result + '.' + lpad(jsDate.getUTCMilliseconds(), 3, 0);\n      }\n    }\n\n    if (this.includeDate && this.includeTime) {\n      result += \"Z\";\n    }\n\n    return result;\n  },\n\n  /**\n     Converts an ISO-8601 formatted datetime string to a datetime string, date\n     string or a time string. The timezone is ignored if supplied.\n\n     @member Backgrid.DatetimeFormatter\n     @param {string} rawData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string|null|undefined} ISO-8601 string in UTC. Null and undefined\n     values are returned as is.\n  */\n  fromRaw: function (rawData, model) {\n    if (_.isNull(rawData) || _.isUndefined(rawData)) return '';\n    return this._convert(rawData);\n  },\n\n  /**\n     Converts an ISO-8601 formatted datetime string to a datetime string, date\n     string or a time string. The timezone is ignored if supplied. This method\n     parses the input values exactly the same way as\n     Backgrid.Extension.MomentFormatter#fromRaw(), in addition to doing some\n     sanity checks.\n\n     @member Backgrid.DatetimeFormatter\n     @param {string} formattedData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string|undefined} ISO-8601 string in UTC. Undefined if a date is\n     found when `includeDate` is false, or a time is found when `includeTime` is\n     false, or if `includeDate` is true and a date is not found, or if\n     `includeTime` is true and a time is not found.\n  */\n  toRaw: function (formattedData, model) {\n    return this._convert(formattedData, true);\n  }\n\n});\n\n/**\n   Formatter to convert any value to string.\n\n   @class Backgrid.StringFormatter\n   @extends Backgrid.CellFormatter\n   @constructor\n */\nvar StringFormatter = Backgrid.StringFormatter = function () {};\nStringFormatter.prototype = new CellFormatter();\n_.extend(StringFormatter.prototype, {\n  /**\n     Converts any value to a string using Ecmascript's implicit type\n     conversion. If the given value is `null` or `undefined`, an empty string is\n     returned instead.\n\n     @member Backgrid.StringFormatter\n     @param {*} rawValue\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string}\n   */\n  fromRaw: function (rawValue, model) {\n    if (_.isUndefined(rawValue) || _.isNull(rawValue)) return '';\n    return rawValue + ''; \n  }\n});\n\n/**\n   Simple email validation formatter.\n\n   @class Backgrid.EmailFormatter\n   @extends Backgrid.CellFormatter\n   @constructor\n */\nvar EmailFormatter = Backgrid.EmailFormatter = function () {};\nEmailFormatter.prototype = new CellFormatter();\n_.extend(EmailFormatter.prototype, {\n  /**\n     Return the input if it is a string that contains an '@' character and if\n     the strings before and after '@' are non-empty. If the input does not\n     validate, `undefined` is returned.\n\n     @member Backgrid.EmailFormatter\n     @param {*} formattedData\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {string|undefined}\n   */\n  toRaw: function (formattedData, model) {\n    var parts = formattedData.trim().split(\"@\");\n    if (parts.length === 2 && _.all(parts)) {\n      return formattedData;\n    }\n  }\n});\n\n/**\n   Formatter for SelectCell.\n\n   If the type of a model value is not a string, it is expected that a subclass\n   of this formatter is provided to the SelectCell, with #toRaw overridden to\n   convert the string value returned from the DOM back to whatever value is\n   expected in the model.\n\n   @class Backgrid.SelectFormatter\n   @extends Backgrid.CellFormatter\n   @constructor\n*/\nvar SelectFormatter = Backgrid.SelectFormatter = function () {};\nSelectFormatter.prototype = new CellFormatter();\n_.extend(SelectFormatter.prototype, {\n\n  /**\n     Normalizes raw scalar or array values to an array.\n\n     @member Backgrid.SelectFormatter\n     @param {*} rawValue\n     @param {Backbone.Model} model Used for more complicated formatting\n     @return {Array.<*>}\n  */\n  fromRaw: function (rawValue, model) {\n    return _.isArray(rawValue) ? rawValue : rawValue != null ? [rawValue] : [];\n  }\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   Generic cell editor base class. Only defines an initializer for a number of\n   required parameters.\n\n   @abstract\n   @class Backgrid.CellEditor\n   @extends Backbone.View\n*/\nvar CellEditor = Backgrid.CellEditor = Backbone.View.extend({\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backgrid.CellFormatter} options.formatter\n     @param {Backgrid.Column} options.column\n     @param {Backbone.Model} options.model\n\n     @throws {TypeError} If `formatter` is not a formatter instance, or when\n     `model` or `column` are undefined.\n  */\n  initialize: function (options) {\n    this.formatter = options.formatter;\n    this.column = options.column;\n    if (!(this.column instanceof Column)) {\n      this.column = new Column(this.column);\n    }\n\n    this.listenTo(this.model, \"backgrid:editing\", this.postRender);\n  },\n\n  /**\n     Post-rendering setup and initialization. Focuses the cell editor's `el` in\n     this default implementation. **Should** be called by Cell classes after\n     calling Backgrid.CellEditor#render.\n  */\n  postRender: function (model, column) {\n    if (column == null || column.get(\"name\") == this.column.get(\"name\")) {\n      this.$el.focus();\n    }\n    return this;\n  }\n\n});\n\n/**\n   InputCellEditor the cell editor type used by most core cell types. This cell\n   editor renders a text input box as its editor. The input will render a\n   placeholder if the value is empty on supported browsers.\n\n   @class Backgrid.InputCellEditor\n   @extends Backgrid.CellEditor\n*/\nvar InputCellEditor = Backgrid.InputCellEditor = CellEditor.extend({\n\n  /** @property */\n  tagName: \"input\",\n\n  /** @property */\n  attributes: {\n    type: \"text\"\n  },\n\n  /** @property */\n  events: {\n    \"blur\": \"saveOrCancel\",\n    \"keydown\": \"saveOrCancel\"\n  },\n\n  /**\n     Initializer. Removes this `el` from the DOM when a `done` event is\n     triggered.\n\n     @param {Object} options\n     @param {Backgrid.CellFormatter} options.formatter\n     @param {Backgrid.Column} options.column\n     @param {Backbone.Model} options.model\n     @param {string} [options.placeholder]\n  */\n  initialize: function (options) {\n    InputCellEditor.__super__.initialize.apply(this, arguments);\n\n    if (options.placeholder) {\n      this.$el.attr(\"placeholder\", options.placeholder);\n    }\n  },\n\n  /**\n     Renders a text input with the cell value formatted for display, if it\n     exists.\n  */\n  render: function () {\n    var model = this.model;\n    this.$el.val(this.formatter.fromRaw(model.get(this.column.get(\"name\")), model));\n    return this;\n  },\n\n  /**\n     If the key pressed is `enter`, `tab`, `up`, or `down`, converts the value\n     in the editor to a raw value for saving into the model using the formatter.\n\n     If the key pressed is `esc` the changes are undone.\n\n     If the editor goes out of focus (`blur`) but the value is invalid, the\n     event is intercepted and cancelled so the cell remains in focus pending for\n     further action. The changes are saved otherwise.\n\n     Triggers a Backbone `backgrid:edited` event from the model when successful,\n     and `backgrid:error` if the value cannot be converted. Classes listening to\n     the `error` event, usually the Cell classes, should respond appropriately,\n     usually by rendering some kind of error feedback.\n\n     @param {Event} e\n  */\n  saveOrCancel: function (e) {\n\n    var formatter = this.formatter;\n    var model = this.model;\n    var column = this.column;\n\n    var command = new Command(e);\n    var blurred = e.type === \"blur\";\n\n    if (command.moveUp() || command.moveDown() || command.moveLeft() || command.moveRight() ||\n        command.save() || blurred) {\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      var val = this.$el.val();\n      var newValue = formatter.toRaw(val, model);\n      if (_.isUndefined(newValue)) {\n        model.trigger(\"backgrid:error\", model, column, val);\n      }\n      else {\n        model.set(column.get(\"name\"), newValue);\n        model.trigger(\"backgrid:edited\", model, column, command);\n      }\n    }\n    // esc\n    else if (command.cancel()) {\n      // undo\n      e.stopPropagation();\n      model.trigger(\"backgrid:edited\", model, column, command);\n    }\n  },\n\n  postRender: function (model, column) {\n    if (column == null || column.get(\"name\") == this.column.get(\"name\")) {\n      // move the cursor to the end on firefox if text is right aligned\n      if (this.$el.css(\"text-align\") === \"right\") {\n        var val = this.$el.val();\n        this.$el.focus().val(null).val(val);\n      }\n      else this.$el.focus();\n    }\n    return this;\n  }\n\n});\n\n/**\n   The super-class for all Cell types. By default, this class renders a plain\n   table cell with the model value converted to a string using the\n   formatter. The table cell is clickable, upon which the cell will go into\n   editor mode, which is rendered by a Backgrid.InputCellEditor instance by\n   default. Upon encountering any formatting errors, this class will add an\n   `error` CSS class to the table cell.\n\n   @abstract\n   @class Backgrid.Cell\n   @extends Backbone.View\n*/\nvar Cell = Backgrid.Cell = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"td\",\n\n  /**\n     @property {Backgrid.CellFormatter|Object|string} [formatter=CellFormatter]\n  */\n  formatter: CellFormatter,\n\n  /**\n     @property {Backgrid.CellEditor} [editor=Backgrid.InputCellEditor] The\n     default editor for all cell instances of this class. This value must be a\n     class, it will be automatically instantiated upon entering edit mode.\n\n     See Backgrid.CellEditor\n  */\n  editor: InputCellEditor,\n\n  /** @property */\n  events: {\n    \"click\": \"enterEditMode\"\n  },\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backbone.Model} options.model\n     @param {Backgrid.Column} options.column\n\n     @throws {ReferenceError} If formatter is a string but a formatter class of\n     said name cannot be found in the Backgrid module.\n  */\n  initialize: function (options) {\n    this.column = options.column;\n    if (!(this.column instanceof Column)) {\n      this.column = new Column(this.column);\n    }\n\n    var column = this.column, model = this.model, $el = this.$el;\n\n    var formatter = Backgrid.resolveNameToClass(column.get(\"formatter\") ||\n                                                this.formatter, \"Formatter\");\n\n    if (!_.isFunction(formatter.fromRaw) && !_.isFunction(formatter.toRaw)) {\n      formatter = new formatter();\n    }\n\n    this.formatter = formatter;\n\n    this.editor = Backgrid.resolveNameToClass(this.editor, \"CellEditor\");\n\n    this.listenTo(model, \"change:\" + column.get(\"name\"), function () {\n      if (!$el.hasClass(\"editor\")) this.render();\n    });\n\n    this.listenTo(model, \"backgrid:error\", this.renderError);\n\n    this.listenTo(column, \"change:editable change:sortable change:renderable\",\n                  function (column) {\n                    var changed = column.changedAttributes();\n                    for (var key in changed) {\n                      if (changed.hasOwnProperty(key)) {\n                        $el.toggleClass(key, changed[key]);\n                      }\n                    }\n                  });\n\n    if (Backgrid.callByNeed(column.editable(), column, model)) $el.addClass(\"editable\");\n    if (Backgrid.callByNeed(column.sortable(), column, model)) $el.addClass(\"sortable\");\n    if (Backgrid.callByNeed(column.renderable(), column, model)) $el.addClass(\"renderable\");\n  },\n\n  /**\n     Render a text string in a table cell. The text is converted from the\n     model's raw value for this cell's column.\n  */\n  render: function () {\n    this.$el.empty();\n    var model = this.model;\n    this.$el.text(this.formatter.fromRaw(model.get(this.column.get(\"name\")), model));\n    this.delegateEvents();\n    return this;\n  },\n\n  /**\n     If this column is editable, a new CellEditor instance is instantiated with\n     its required parameters. An `editor` CSS class is added to the cell upon\n     entering edit mode.\n\n     This method triggers a Backbone `backgrid:edit` event from the model when\n     the cell is entering edit mode and an editor instance has been constructed,\n     but before it is rendered and inserted into the DOM. The cell and the\n     constructed cell editor instance are sent as event parameters when this\n     event is triggered.\n\n     When this cell has finished switching to edit mode, a Backbone\n     `backgrid:editing` event is triggered from the model. The cell and the\n     constructed cell instance are also sent as parameters in the event.\n\n     When the model triggers a `backgrid:error` event, it means the editor is\n     unable to convert the current user input to an apprpriate value for the\n     model's column, and an `error` CSS class is added to the cell accordingly.\n  */\n  enterEditMode: function () {\n    var model = this.model;\n    var column = this.column;\n\n    var editable = Backgrid.callByNeed(column.editable(), column, model);\n    if (editable) {\n\n      this.currentEditor = new this.editor({\n        column: this.column,\n        model: this.model,\n        formatter: this.formatter\n      });\n\n      model.trigger(\"backgrid:edit\", model, column, this, this.currentEditor);\n\n      // Need to redundantly undelegate events for Firefox\n      this.undelegateEvents();\n      this.$el.empty();\n      this.$el.append(this.currentEditor.$el);\n      this.currentEditor.render();\n      this.$el.addClass(\"editor\");\n\n      model.trigger(\"backgrid:editing\", model, column, this, this.currentEditor);\n    }\n  },\n\n  /**\n     Put an `error` CSS class on the table cell.\n  */\n  renderError: function (model, column) {\n    if (column == null || column.get(\"name\") == this.column.get(\"name\")) {\n      this.$el.addClass(\"error\");\n    }\n  },\n\n  /**\n     Removes the editor and re-render in display mode.\n  */\n  exitEditMode: function () {\n    this.$el.removeClass(\"error\");\n    this.currentEditor.remove();\n    this.stopListening(this.currentEditor);\n    delete this.currentEditor;\n    this.$el.removeClass(\"editor\");\n    this.render();\n  },\n\n  /**\n     Clean up this cell.\n\n     @chainable\n  */\n  remove: function () {\n    if (this.currentEditor) {\n      this.currentEditor.remove.apply(this.currentEditor, arguments);\n      delete this.currentEditor;\n    }\n    return Cell.__super__.remove.apply(this, arguments);\n  }\n\n});\n\n/**\n   StringCell displays HTML escaped strings and accepts anything typed in.\n\n   @class Backgrid.StringCell\n   @extends Backgrid.Cell\n*/\nvar StringCell = Backgrid.StringCell = Cell.extend({\n\n  /** @property */\n  className: \"string-cell\",\n\n  formatter: StringFormatter\n\n});\n\n/**\n   UriCell renders an HTML `<a>` anchor for the value and accepts URIs as user\n   input values. No type conversion or URL validation is done by the formatter\n   of this cell. Users who need URL validation are encourage to subclass UriCell\n   to take advantage of the parsing capabilities of the HTMLAnchorElement\n   available on HTML5-capable browsers or using a third-party library like\n   [URI.js](https://github.com/medialize/URI.js).\n\n   @class Backgrid.UriCell\n   @extends Backgrid.Cell\n*/\nvar UriCell = Backgrid.UriCell = Cell.extend({\n\n  /** @property */\n  className: \"uri-cell\",\n\n  /**\n     @property {string} [title] The title attribute of the generated anchor. It\n     uses the display value formatted by the `formatter.fromRaw` by default.\n  */\n  title: null,\n\n  /**\n     @property {string} [target=\"_blank\"] The target attribute of the generated\n     anchor.\n  */\n  target: \"_blank\",\n\n  initialize: function (options) {\n    UriCell.__super__.initialize.apply(this, arguments);\n    this.title = options.title || this.title;\n    this.target = options.target || this.target;\n  },\n\n  render: function () {\n    this.$el.empty();\n    var rawValue = this.model.get(this.column.get(\"name\"));\n    var formattedValue = this.formatter.fromRaw(rawValue, this.model);\n    this.$el.append($(\"<a>\", {\n      tabIndex: -1,\n      href: rawValue,\n      title: this.title || formattedValue,\n      target: this.target\n    }).text(formattedValue));\n    this.delegateEvents();\n    return this;\n  }\n\n});\n\n/**\n   Like Backgrid.UriCell, EmailCell renders an HTML `<a>` anchor for the\n   value. The `href` in the anchor is prefixed with `mailto:`. EmailCell will\n   complain if the user enters a string that doesn't contain the `@` sign.\n\n   @class Backgrid.EmailCell\n   @extends Backgrid.StringCell\n*/\nvar EmailCell = Backgrid.EmailCell = StringCell.extend({\n\n  /** @property */\n  className: \"email-cell\",\n\n  formatter: EmailFormatter,\n\n  render: function () {\n    this.$el.empty();\n    var model = this.model;\n    var formattedValue = this.formatter.fromRaw(model.get(this.column.get(\"name\")), model);\n    this.$el.append($(\"<a>\", {\n      tabIndex: -1,\n      href: \"mailto:\" + formattedValue,\n      title: formattedValue\n    }).text(formattedValue));\n    this.delegateEvents();\n    return this;\n  }\n\n});\n\n/**\n   NumberCell is a generic cell that renders all numbers. Numbers are formatted\n   using a Backgrid.NumberFormatter.\n\n   @class Backgrid.NumberCell\n   @extends Backgrid.Cell\n*/\nvar NumberCell = Backgrid.NumberCell = Cell.extend({\n\n  /** @property */\n  className: \"number-cell\",\n\n  /**\n     @property {number} [decimals=2] Must be an integer.\n  */\n  decimals: NumberFormatter.prototype.defaults.decimals,\n\n  /** @property {string} [decimalSeparator='.'] */\n  decimalSeparator: NumberFormatter.prototype.defaults.decimalSeparator,\n\n  /** @property {string} [orderSeparator=','] */\n  orderSeparator: NumberFormatter.prototype.defaults.orderSeparator,\n\n  /** @property {Backgrid.CellFormatter} [formatter=Backgrid.NumberFormatter] */\n  formatter: NumberFormatter,\n\n  /**\n     Initializes this cell and the number formatter.\n\n     @param {Object} options\n     @param {Backbone.Model} options.model\n     @param {Backgrid.Column} options.column\n  */\n  initialize: function (options) {\n    NumberCell.__super__.initialize.apply(this, arguments);\n    var formatter = this.formatter;\n    formatter.decimals = this.decimals;\n    formatter.decimalSeparator = this.decimalSeparator;\n    formatter.orderSeparator = this.orderSeparator;\n  }\n\n});\n\n/**\n   An IntegerCell is just a Backgrid.NumberCell with 0 decimals. If a floating\n   point number is supplied, the number is simply rounded the usual way when\n   displayed.\n\n   @class Backgrid.IntegerCell\n   @extends Backgrid.NumberCell\n*/\nvar IntegerCell = Backgrid.IntegerCell = NumberCell.extend({\n\n  /** @property */\n  className: \"integer-cell\",\n\n  /**\n     @property {number} decimals Must be an integer.\n  */\n  decimals: 0\n});\n\n/**\n   A PercentCell is another Backgrid.NumberCell that takes a floating number,\n   optionally multiplied by a multiplier and display it as a percentage.\n\n   @class Backgrid.PercentCell\n   @extends Backgrid.NumberCell\n */\nvar PercentCell = Backgrid.PercentCell = NumberCell.extend({\n\n  /** @property */\n  className: \"percent-cell\",\n\n  /** @property {number} [multiplier=1] */\n  multiplier: PercentFormatter.prototype.defaults.multiplier,\n\n  /** @property {string} [symbol='%'] */\n  symbol: PercentFormatter.prototype.defaults.symbol,\n\n  /** @property {Backgrid.CellFormatter} [formatter=Backgrid.PercentFormatter] */\n  formatter: PercentFormatter,\n\n  /**\n     Initializes this cell and the percent formatter.\n\n     @param {Object} options\n     @param {Backbone.Model} options.model\n     @param {Backgrid.Column} options.column\n  */\n  initialize: function () {\n    PercentCell.__super__.initialize.apply(this, arguments);\n    var formatter = this.formatter;\n    formatter.multiplier = this.multiplier;\n    formatter.symbol = this.symbol;\n  }\n\n});\n\n/**\n   DatetimeCell is a basic cell that accepts datetime string values in RFC-2822\n   or W3C's subset of ISO-8601 and displays them in ISO-8601 format. For a much\n   more sophisticated date time cell with better datetime formatting, take a\n   look at the Backgrid.Extension.MomentCell extension.\n\n   @class Backgrid.DatetimeCell\n   @extends Backgrid.Cell\n\n   See:\n\n   - Backgrid.Extension.MomentCell\n   - Backgrid.DatetimeFormatter\n*/\nvar DatetimeCell = Backgrid.DatetimeCell = Cell.extend({\n\n  /** @property */\n  className: \"datetime-cell\",\n\n  /**\n     @property {boolean} [includeDate=true]\n  */\n  includeDate: DatetimeFormatter.prototype.defaults.includeDate,\n\n  /**\n     @property {boolean} [includeTime=true]\n  */\n  includeTime: DatetimeFormatter.prototype.defaults.includeTime,\n\n  /**\n     @property {boolean} [includeMilli=false]\n  */\n  includeMilli: DatetimeFormatter.prototype.defaults.includeMilli,\n\n  /** @property {Backgrid.CellFormatter} [formatter=Backgrid.DatetimeFormatter] */\n  formatter: DatetimeFormatter,\n\n  /**\n     Initializes this cell and the datetime formatter.\n\n     @param {Object} options\n     @param {Backbone.Model} options.model\n     @param {Backgrid.Column} options.column\n  */\n  initialize: function (options) {\n    DatetimeCell.__super__.initialize.apply(this, arguments);\n    var formatter = this.formatter;\n    formatter.includeDate = this.includeDate;\n    formatter.includeTime = this.includeTime;\n    formatter.includeMilli = this.includeMilli;\n\n    var placeholder = this.includeDate ? \"YYYY-MM-DD\" : \"\";\n    placeholder += (this.includeDate && this.includeTime) ? \"T\" : \"\";\n    placeholder += this.includeTime ? \"HH:mm:ss\" : \"\";\n    placeholder += (this.includeTime && this.includeMilli) ? \".SSS\" : \"\";\n\n    this.editor = this.editor.extend({\n      attributes: _.extend({}, this.editor.prototype.attributes, this.editor.attributes, {\n        placeholder: placeholder\n      })\n    });\n  }\n\n});\n\n/**\n   DateCell is a Backgrid.DatetimeCell without the time part.\n\n   @class Backgrid.DateCell\n   @extends Backgrid.DatetimeCell\n*/\nvar DateCell = Backgrid.DateCell = DatetimeCell.extend({\n\n  /** @property */\n  className: \"date-cell\",\n\n  /** @property */\n  includeTime: false\n\n});\n\n/**\n   TimeCell is a Backgrid.DatetimeCell without the date part.\n\n   @class Backgrid.TimeCell\n   @extends Backgrid.DatetimeCell\n*/\nvar TimeCell = Backgrid.TimeCell = DatetimeCell.extend({\n\n  /** @property */\n  className: \"time-cell\",\n\n  /** @property */\n  includeDate: false\n\n});\n\n/**\n   BooleanCellEditor renders a checkbox as its editor.\n\n   @class Backgrid.BooleanCellEditor\n   @extends Backgrid.CellEditor\n*/\nvar BooleanCellEditor = Backgrid.BooleanCellEditor = CellEditor.extend({\n\n  /** @property */\n  tagName: \"input\",\n\n  /** @property */\n  attributes: {\n    tabIndex: -1,\n    type: \"checkbox\"\n  },\n\n  /** @property */\n  events: {\n    \"mousedown\": function () {\n      this.mouseDown = true;\n    },\n    \"blur\": \"enterOrExitEditMode\",\n    \"mouseup\": function () {\n      this.mouseDown = false;\n    },\n    \"change\": \"saveOrCancel\",\n    \"keydown\": \"saveOrCancel\"\n  },\n\n  /**\n     Renders a checkbox and check it if the model value of this column is true,\n     uncheck otherwise.\n  */\n  render: function () {\n    var model = this.model;\n    var val = this.formatter.fromRaw(model.get(this.column.get(\"name\")), model);\n    this.$el.prop(\"checked\", val);\n    return this;\n  },\n\n  /**\n     Event handler. Hack to deal with the case where `blur` is fired before\n     `change` and `click` on a checkbox.\n  */\n  enterOrExitEditMode: function (e) {\n    if (!this.mouseDown) {\n      var model = this.model;\n      model.trigger(\"backgrid:edited\", model, this.column, new Command(e));\n    }\n  },\n\n  /**\n     Event handler. Save the value into the model if the event is `change` or\n     one of the keyboard navigation key presses. Exit edit mode without saving\n     if `escape` was pressed.\n  */\n  saveOrCancel: function (e) {\n    var model = this.model;\n    var column = this.column;\n    var formatter = this.formatter;\n    var command = new Command(e);\n    // skip ahead to `change` when space is pressed\n    if (command.passThru() && e.type != \"change\") return true;\n    if (command.cancel()) {\n      e.stopPropagation();\n      model.trigger(\"backgrid:edited\", model, column, command);\n    }\n\n    var $el = this.$el;\n    if (command.save() || command.moveLeft() || command.moveRight() || command.moveUp() ||\n        command.moveDown()) {\n      e.preventDefault();\n      e.stopPropagation();\n      var val = formatter.toRaw($el.prop(\"checked\"), model);\n      model.set(column.get(\"name\"), val);\n      model.trigger(\"backgrid:edited\", model, column, command);\n    }\n    else if (e.type == \"change\") {\n      var val = formatter.toRaw($el.prop(\"checked\"), model);\n      model.set(column.get(\"name\"), val);\n      $el.focus();\n    }\n  }\n\n});\n\n/**\n   BooleanCell renders a checkbox both during display mode and edit mode. The\n   checkbox is checked if the model value is true, unchecked otherwise.\n\n   @class Backgrid.BooleanCell\n   @extends Backgrid.Cell\n*/\nvar BooleanCell = Backgrid.BooleanCell = Cell.extend({\n\n  /** @property */\n  className: \"boolean-cell\",\n\n  /** @property */\n  editor: BooleanCellEditor,\n\n  /** @property */\n  events: {\n    \"click\": \"enterEditMode\"\n  },\n\n  /**\n     Renders a checkbox and check it if the model value of this column is true,\n     uncheck otherwise.\n  */\n  render: function () {\n    this.$el.empty();\n    var model = this.model, column = this.column;\n    var editable = Backgrid.callByNeed(column.editable(), column, model);\n    this.$el.append($(\"<input>\", {\n      tabIndex: -1,\n      type: \"checkbox\",\n      checked: this.formatter.fromRaw(model.get(column.get(\"name\")), model),\n      disabled: !editable\n    }));\n    this.delegateEvents();\n    return this;\n  }\n\n});\n\n/**\n   SelectCellEditor renders an HTML `<select>` fragment as the editor.\n\n   @class Backgrid.SelectCellEditor\n   @extends Backgrid.CellEditor\n*/\nvar SelectCellEditor = Backgrid.SelectCellEditor = CellEditor.extend({\n\n  /** @property */\n  tagName: \"select\",\n\n  /** @property */\n  events: {\n    \"change\": \"save\",\n    \"blur\": \"close\",\n    \"keydown\": \"close\"\n  },\n\n  /** @property {function(Object, ?Object=): string} template */\n  template: _.template('<option value=\"<%- value %>\" <%= selected ? \\'selected=\"selected\"\\' : \"\" %>><%- text %></option>', null, {variable: null}),\n\n  setOptionValues: function (optionValues) {\n    this.optionValues = optionValues;\n    this.optionValues = _.result(this, \"optionValues\");\n  },\n\n  setMultiple: function (multiple) {\n    this.multiple = multiple;\n    this.$el.prop(\"multiple\", multiple);\n  },\n\n  _renderOptions: function (nvps, selectedValues) {\n    var options = '';\n    for (var i = 0; i < nvps.length; i++) {\n      options = options + this.template({\n        text: nvps[i][0],\n        value: nvps[i][1],\n        selected: _.indexOf(selectedValues, nvps[i][1]) > -1\n      });\n    }\n    return options;\n  },\n\n  /**\n     Renders the options if `optionValues` is a list of name-value pairs. The\n     options are contained inside option groups if `optionValues` is a list of\n     object hashes. The name is rendered at the option text and the value is the\n     option value. If `optionValues` is a function, it is called without a\n     parameter.\n  */\n  render: function () {\n    this.$el.empty();\n\n    var optionValues = _.result(this, \"optionValues\");\n    var model = this.model;\n    var selectedValues = this.formatter.fromRaw(model.get(this.column.get(\"name\")), model);\n\n    if (!_.isArray(optionValues)) throw new TypeError(\"optionValues must be an array\");\n\n    var optionValue = null;\n    var optionText = null;\n    var optionValue = null;\n    var optgroupName = null;\n    var optgroup = null;\n\n    for (var i = 0; i < optionValues.length; i++) {\n      var optionValue = optionValues[i];\n\n      if (_.isArray(optionValue)) {\n        optionText  = optionValue[0];\n        optionValue = optionValue[1];\n\n        this.$el.append(this.template({\n          text: optionText,\n          value: optionValue,\n          selected: _.indexOf(selectedValues, optionValue) > -1\n        }));\n      }\n      else if (_.isObject(optionValue)) {\n        optgroupName = optionValue.name;\n        optgroup = $(\"<optgroup></optgroup>\", { label: optgroupName });\n        optgroup.append(this._renderOptions.call(this, optionValue.values, selectedValues));\n        this.$el.append(optgroup);\n      }\n      else {\n        throw new TypeError(\"optionValues elements must be a name-value pair or an object hash of { name: 'optgroup label', value: [option name-value pairs] }\");\n      }\n    }\n\n    this.delegateEvents();\n\n    return this;\n  },\n\n  /**\n     Saves the value of the selected option to the model attribute.\n  */\n  save: function (e) {\n    var model = this.model;\n    var column = this.column;\n    model.set(column.get(\"name\"), this.formatter.toRaw(this.$el.val(), model));\n  },\n\n  /**\n     Triggers a `backgrid:edited` event from the model so the body can close\n     this editor.\n  */\n  close: function (e) {\n    var model = this.model;\n    var column = this.column;\n    var command = new Command(e);\n    if (command.cancel()) {\n      e.stopPropagation();\n      model.trigger(\"backgrid:edited\", model, column, new Command(e));\n    }\n    else if (command.save() || command.moveLeft() || command.moveRight() ||\n             command.moveUp() || command.moveDown() || e.type == \"blur\") {\n      e.preventDefault();\n      e.stopPropagation();\n      this.save(e);\n      model.trigger(\"backgrid:edited\", model, column, new Command(e));\n    }\n  }\n\n});\n\n/**\n   SelectCell is also a different kind of cell in that upon going into edit mode\n   the cell renders a list of options to pick from, as opposed to an input box.\n\n   SelectCell cannot be referenced by its string name when used in a column\n   definition because it requires an `optionValues` class attribute to be\n   defined. `optionValues` can either be a list of name-value pairs, to be\n   rendered as options, or a list of object hashes which consist of a key *name*\n   which is the option group name, and a key *values* which is a list of\n   name-value pairs to be rendered as options under that option group.\n\n   In addition, `optionValues` can also be a parameter-less function that\n   returns one of the above. If the options are static, it is recommended the\n   returned values to be memoized. `_.memoize()` is a good function to help with\n   that.\n\n   During display mode, the default formatter will normalize the raw model value\n   to an array of values whether the raw model value is a scalar or an\n   array. Each value is compared with the `optionValues` values using\n   Ecmascript's implicit type conversion rules. When exiting edit mode, no type\n   conversion is performed when saving into the model. This behavior is not\n   always desirable when the value type is anything other than string. To\n   control type conversion on the client-side, you should subclass SelectCell to\n   provide a custom formatter or provide the formatter to your column\n   definition.\n\n   See:\n     [$.fn.val()](http://api.jquery.com/val/)\n\n   @class Backgrid.SelectCell\n   @extends Backgrid.Cell\n*/\nvar SelectCell = Backgrid.SelectCell = Cell.extend({\n\n  /** @property */\n  className: \"select-cell\",\n\n  /** @property */\n  editor: SelectCellEditor,\n\n  /** @property */\n  multiple: false,\n\n  /** @property */\n  formatter: SelectFormatter,\n\n  /**\n     @property {Array.<Array>|Array.<{name: string, values: Array.<Array>}>} optionValues\n  */\n  optionValues: undefined,\n\n  /** @property */\n  delimiter: ', ',\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backbone.Model} options.model\n     @param {Backgrid.Column} options.column\n\n     @throws {TypeError} If `optionsValues` is undefined.\n  */\n  initialize: function (options) {\n    SelectCell.__super__.initialize.apply(this, arguments);\n    this.listenTo(this.model, \"backgrid:edit\", function (model, column, cell, editor) {\n      if (column.get(\"name\") == this.column.get(\"name\")) {\n        editor.setOptionValues(this.optionValues);\n        editor.setMultiple(this.multiple);\n      }\n    });\n  },\n\n  /**\n     Renders the label using the raw value as key to look up from `optionValues`.\n\n     @throws {TypeError} If `optionValues` is malformed.\n  */\n  render: function () {\n    this.$el.empty();\n\n    var optionValues = _.result(this, \"optionValues\");\n    var model = this.model;\n    var rawData = this.formatter.fromRaw(model.get(this.column.get(\"name\")), model);\n\n    var selectedText = [];\n\n    try {\n      if (!_.isArray(optionValues) || _.isEmpty(optionValues)) throw new TypeError;\n\n      for (var k = 0; k < rawData.length; k++) {\n        var rawDatum = rawData[k];\n\n        for (var i = 0; i < optionValues.length; i++) {\n          var optionValue = optionValues[i];\n\n          if (_.isArray(optionValue)) {\n            var optionText  = optionValue[0];\n            var optionValue = optionValue[1];\n\n            if (optionValue == rawDatum) selectedText.push(optionText);\n          }\n          else if (_.isObject(optionValue)) {\n            var optionGroupValues = optionValue.values;\n\n            for (var j = 0; j < optionGroupValues.length; j++) {\n              var optionGroupValue = optionGroupValues[j];\n              if (optionGroupValue[1] == rawDatum) {\n                selectedText.push(optionGroupValue[0]);\n              }\n            }\n          }\n          else {\n            throw new TypeError;\n          }\n        }\n      }\n\n      this.$el.append(selectedText.join(this.delimiter));\n    }\n    catch (ex) {\n      if (ex instanceof TypeError) {\n        throw new TypeError(\"'optionValues' must be of type {Array.<Array>|Array.<{name: string, values: Array.<Array>}>}\");\n      }\n      throw ex;\n    }\n\n    this.delegateEvents();\n\n    return this;\n  }\n\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   A Column is a placeholder for column metadata.\n\n   You usually don't need to create an instance of this class yourself as a\n   collection of column instances will be created for you from a list of column\n   attributes in the Backgrid.js view class constructors.\n\n   @class Backgrid.Column\n   @extends Backbone.Model\n*/\nvar Column = Backgrid.Column = Backbone.Model.extend({\n\n  /**\n     @cfg {Object} defaults Column defaults. To override any of these default\n     values, you can either change the prototype directly to override\n     Column.defaults globally or extend Column and supply the custom class to\n     Backgrid.Grid:\n\n         // Override Column defaults globally\n         Column.prototype.defaults.sortable = false;\n\n         // Override Column defaults locally\n         var MyColumn = Column.extend({\n           defaults: _.defaults({\n             editable: false\n           }, Column.prototype.defaults)\n         });\n\n         var grid = new Backgrid.Grid(columns: new Columns([{...}, {...}], {\n           model: MyColumn\n         }));\n\n     @cfg {string} [defaults.name] The default name of the model attribute.\n\n     @cfg {string} [defaults.label] The default label to show in the header.\n\n     @cfg {string|Backgrid.Cell} [defaults.cell] The default cell type. If this\n     is a string, the capitalized form will be used to look up a cell class in\n     Backbone, i.e.: string => StringCell. If a Cell subclass is supplied, it is\n     initialized with a hash of parameters. If a Cell instance is supplied, it\n     is used directly.\n\n     @cfg {string|Backgrid.HeaderCell} [defaults.headerCell] The default header\n     cell type.\n\n     @cfg {boolean|string|function(): boolean} [defaults.sortable=true] Whether\n     this column is sortable. If the value is a string, a method will the same\n     name will be looked up from the column instance to determine whether the\n     column should be sortable. The method's signature must be `function\n     (Backgrid.Column, Backbone.Model): boolean`.\n\n     @cfg {boolean|string|function(): boolean} [defaults.editable=true] Whether\n     this column is editable. If the value is a string, a method will the same\n     name will be looked up from the column instance to determine whether the\n     column should be editable. The method's signature must be `function\n     (Backgrid.Column, Backbone.Model): boolean`.\n\n     @cfg {boolean|string|function(): boolean} [defaults.renderable=true]\n     Whether this column is renderable. If the value is a string, a method will\n     the same name will be looked up from the column instance to determine\n     whether the column should be renderable. The method's signature must be\n     `function (Backrid.Column, Backbone.Model): boolean`.\n\n     @cfg {Backgrid.CellFormatter | Object | string} [defaults.formatter] The\n     formatter to use to convert between raw model values and user input.\n\n     @cfg {\"toggle\"|\"cycle\"} [defaults.sortType=\"cycle\"] Whether sorting will\n     toggle between ascending and descending order, or cycle between insertion\n     order, ascending and descending order.\n\n     @cfg {(function(Backbone.Model, string): *) | string} [defaults.sortValue]\n     The function to use to extract a value from the model for comparison during\n     sorting. If this value is a string, a method with the same name will be\n     looked up from the column instance.\n\n     @cfg {\"ascending\"|\"descending\"|null} [defaults.direction=null] The initial\n     sorting direction for this column. The default is ordered by\n     Backbone.Model.cid, which usually means the collection is ordered by\n     insertion order.\n  */\n  defaults: {\n    name: undefined,\n    label: undefined,\n    sortable: true,\n    editable: true,\n    renderable: true,\n    formatter: undefined,\n    sortType: \"cycle\",\n    sortValue: undefined,\n    direction: null,\n    cell: undefined,\n    headerCell: undefined\n  },\n\n  /**\n     Initializes this Column instance.\n\n     @param {Object} attrs\n\n     @param {string} attrs.name The model attribute this column is responsible\n     for.\n\n     @param {string|Backgrid.Cell} attrs.cell The cell type to use to render\n     this column.\n\n     @param {string} [attrs.label]\n\n     @param {string|Backgrid.HeaderCell} [attrs.headerCell]\n\n     @param {boolean|string|function(): boolean} [attrs.sortable=true]\n\n     @param {boolean|string|function(): boolean} [attrs.editable=true]\n\n     @param {boolean|string|function(): boolean} [attrs.renderable=true]\n\n     @param {Backgrid.CellFormatter | Object | string} [attrs.formatter]\n\n     @param {\"toggle\"|\"cycle\"}  [attrs.sortType=\"cycle\"]\n\n     @param {(function(Backbone.Model, string): *) | string} [attrs.sortValue]\n\n     @throws {TypeError} If attrs.cell or attrs.options are not supplied.\n\n     @throws {ReferenceError} If formatter is a string but a formatter class of\n     said name cannot be found in the Backgrid module.\n\n     See:\n\n     - Backgrid.Column.defaults\n     - Backgrid.Cell\n     - Backgrid.CellFormatter\n   */\n  initialize: function () {\n    if (!this.has(\"label\")) {\n      this.set({ label: this.get(\"name\") }, { silent: true });\n    }\n\n    var headerCell = Backgrid.resolveNameToClass(this.get(\"headerCell\"), \"HeaderCell\");\n\n    var cell = Backgrid.resolveNameToClass(this.get(\"cell\"), \"Cell\");\n\n    this.set({cell: cell, headerCell: headerCell}, { silent: true });\n  },\n\n  /**\n     Returns an appropriate value extraction function from a model for sorting.\n\n     If the column model contains an attribute `sortValue`, if it is a string, a\n     method from the column instance identifified by the `sortValue` string is\n     returned. If it is a function, it it returned as is. If `sortValue` isn't\n     found from the column model's attributes, a default value extraction\n     function is returned which will compare according to the natural order of\n     the value's type.\n\n     @return {function(Backbone.Model, string): *}\n   */\n  sortValue: function () {\n    var sortValue = this.get(\"sortValue\");\n    if (_.isString(sortValue)) return this[sortValue];\n    else if (_.isFunction(sortValue)) return sortValue;\n\n    return function (model, colName) {\n      return model.get(colName);\n    };\n  }\n\n  /**\n     @member Backgrid.Column\n     @protected\n     @method sortable\n     @return {function(Backgrid.Column, Backbone.Model): boolean | boolean}\n  */\n\n  /**\n     @member Backgrid.Column\n     @protected\n     @method editable\n     @return {function(Backgrid.Column, Backbone.Model): boolean | boolean}\n  */\n\n  /**\n     @member Backgrid.Column\n     @protected\n     @method renderable\n     @return {function(Backgrid.Column, Backbone.Model): boolean | boolean}\n  */\n});\n\n_.each([\"sortable\", \"renderable\", \"editable\"], function (key) {\n  Column.prototype[key] = function () {\n    var value = this.get(key);\n    if (_.isString(value)) return this[value];\n    else if (_.isFunction(value)) return value;\n\n    return !!value;\n  };\n});\n\n/**\n   A Backbone collection of Column instances.\n\n   @class Backgrid.Columns\n   @extends Backbone.Collection\n */\nvar Columns = Backgrid.Columns = Backbone.Collection.extend({\n\n  /**\n     @property {Backgrid.Column} model\n   */\n  model: Column\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   Row is a simple container view that takes a model instance and a list of\n   column metadata describing how each of the model's attribute is to be\n   rendered, and apply the appropriate cell to each attribute.\n\n   @class Backgrid.Row\n   @extends Backbone.View\n*/\nvar Row = Backgrid.Row = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"tr\",\n\n  /**\n     Initializes a row view instance.\n\n     @param {Object} options\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns Column metadata.\n     @param {Backbone.Model} options.model The model instance to render.\n\n     @throws {TypeError} If options.columns or options.model is undefined.\n  */\n  initialize: function (options) {\n\n    var columns = this.columns = options.columns;\n    if (!(columns instanceof Backbone.Collection)) {\n      columns = this.columns = new Columns(columns);\n    }\n\n    var cells = this.cells = [];\n    for (var i = 0; i < columns.length; i++) {\n      cells.push(this.makeCell(columns.at(i), options));\n    }\n\n    this.listenTo(columns, \"add\", function (column, columns) {\n      var i = columns.indexOf(column);\n      var cell = this.makeCell(column, options);\n      cells.splice(i, 0, cell);\n\n      var $el = this.$el;\n      if (i === 0) {\n        $el.prepend(cell.render().$el);\n      }\n      else if (i === columns.length - 1) {\n        $el.append(cell.render().$el);\n      }\n      else {\n        $el.children().eq(i).before(cell.render().$el);\n      }\n    });\n\n    this.listenTo(columns, \"remove\", function (column, columns, opts) {\n      cells[opts.index].remove();\n      cells.splice(opts.index, 1);\n    });\n  },\n\n  /**\n     Factory method for making a cell. Used by #initialize internally. Override\n     this to provide an appropriate cell instance for a custom Row subclass.\n\n     @protected\n\n     @param {Backgrid.Column} column\n     @param {Object} options The options passed to #initialize.\n\n     @return {Backgrid.Cell}\n  */\n  makeCell: function (column) {\n    return new (column.get(\"cell\"))({\n      column: column,\n      model: this.model\n    });\n  },\n\n  /**\n     Renders a row of cells for this row's model.\n  */\n  render: function () {\n    this.$el.empty();\n\n    var fragment = document.createDocumentFragment();\n    for (var i = 0; i < this.cells.length; i++) {\n      fragment.appendChild(this.cells[i].render().el);\n    }\n\n    this.el.appendChild(fragment);\n\n    this.delegateEvents();\n\n    return this;\n  },\n\n  /**\n     Clean up this row and its cells.\n\n     @chainable\n  */\n  remove: function () {\n    for (var i = 0; i < this.cells.length; i++) {\n      var cell = this.cells[i];\n      cell.remove.apply(cell, arguments);\n    }\n    return Backbone.View.prototype.remove.apply(this, arguments);\n  }\n\n});\n\n/**\n   EmptyRow is a simple container view that takes a list of column and render a\n   row with a single column.\n\n   @class Backgrid.EmptyRow\n   @extends Backbone.View\n*/\nvar EmptyRow = Backgrid.EmptyRow = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"tr\",\n\n  /** @property {string|function(): string} */\n  emptyText: null,\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {string|function(): string} options.emptyText\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns Column metadata.\n   */\n  initialize: function (options) {\n    this.emptyText = options.emptyText;\n    this.columns =  options.columns;\n  },\n\n  /**\n     Renders an empty row.\n  */\n  render: function () {\n    this.$el.empty();\n\n    var td = document.createElement(\"td\");\n    td.setAttribute(\"colspan\", this.columns.length);\n    td.appendChild(document.createTextNode(_.result(this, \"emptyText\")));\n\n    this.el.className = \"empty\";\n    this.el.appendChild(td);\n\n    return this;\n  }\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   HeaderCell is a special cell class that renders a column header cell. If the\n   column is sortable, a sorter is also rendered and will trigger a table\n   refresh after sorting.\n\n   @class Backgrid.HeaderCell\n   @extends Backbone.View\n */\nvar HeaderCell = Backgrid.HeaderCell = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"th\",\n\n  /** @property */\n  events: {\n    \"click a\": \"onClick\"\n  },\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backgrid.Column|Object} options.column\n\n     @throws {TypeError} If options.column or options.collection is undefined.\n   */\n  initialize: function (options) {\n    this.column = options.column;\n    if (!(this.column instanceof Column)) {\n      this.column = new Column(this.column);\n    }\n\n    var column = this.column, collection = this.collection, $el = this.$el;\n\n    this.listenTo(column, \"change:editable change:sortable change:renderable\",\n                  function (column) {\n                    var changed = column.changedAttributes();\n                    for (var key in changed) {\n                      if (changed.hasOwnProperty(key)) {\n                        $el.toggleClass(key, changed[key]);\n                      }\n                    }\n                  });\n    this.listenTo(column, \"change:direction\", this.setCellDirection);\n    this.listenTo(column, \"change:name change:label\", this.render);\n\n    if (Backgrid.callByNeed(column.editable(), column, collection)) $el.addClass(\"editable\");\n    if (Backgrid.callByNeed(column.sortable(), column, collection)) $el.addClass(\"sortable\");\n    if (Backgrid.callByNeed(column.renderable(), column, collection)) $el.addClass(\"renderable\");\n\n    this.listenTo(collection.fullCollection || collection, \"sort\", this.removeCellDirection);\n  },\n\n  /**\n     Event handler for the collection's `sort` event. Removes all the CSS\n     direction classes.\n   */\n  removeCellDirection: function () {\n    this.$el.removeClass(\"ascending\").removeClass(\"descending\");\n    this.column.set(\"direction\", null);\n  },\n\n  /**\n     Event handler for the column's `change:direction` event. If this\n     HeaderCell's column is being sorted on, it applies the direction given as a\n     CSS class to the header cell. Removes all the CSS direction classes\n     otherwise.\n   */\n  setCellDirection: function (column, direction) {\n    this.$el.removeClass(\"ascending\").removeClass(\"descending\");\n    if (column.cid == this.column.cid) this.$el.addClass(direction);\n  },\n\n  /**\n     Event handler for the `click` event on the cell's anchor. If the column is\n     sortable, clicking on the anchor will cycle through 3 sorting orderings -\n     `ascending`, `descending`, and default.\n   */\n  onClick: function (e) {\n    e.preventDefault();\n\n    var column = this.column;\n    var collection = this.collection;\n    var event = \"backgrid:sort\";\n\n    function cycleSort(header, col) {\n      if (column.get(\"direction\") === \"ascending\") collection.trigger(event, col, \"descending\");\n      else if (column.get(\"direction\") === \"descending\") collection.trigger(event, col, null);\n      else collection.trigger(event, col, \"ascending\");\n    }\n\n    function toggleSort(header, col) {\n      if (column.get(\"direction\") === \"ascending\") collection.trigger(event, col, \"descending\");\n      else collection.trigger(event, col, \"ascending\");\n    }\n\n    var sortable = Backgrid.callByNeed(column.sortable(), column, this.collection);\n    if (sortable) {\n      var sortType = column.get(\"sortType\");\n      if (sortType === \"toggle\") toggleSort(this, column);\n      else cycleSort(this, column);\n    }\n  },\n\n  /**\n     Renders a header cell with a sorter, a label, and a class name for this\n     column.\n   */\n  render: function () {\n    this.$el.empty();\n    var column = this.column;\n    var sortable = Backgrid.callByNeed(column.sortable(), column, this.collection);\n    var label;\n    if(sortable){\n      label = $(\"<a>\").text(column.get(\"label\")).append(\"<b class='sort-caret'></b>\");\n    } else {\n      label = document.createTextNode(column.get(\"label\"));\n    }\n\n    this.$el.append(label);\n    this.$el.addClass(column.get(\"name\"));\n    this.$el.addClass(column.get(\"direction\"));\n    this.delegateEvents();\n    return this;\n  }\n\n});\n\n/**\n   HeaderRow is a controller for a row of header cells.\n\n   @class Backgrid.HeaderRow\n   @extends Backgrid.Row\n */\nvar HeaderRow = Backgrid.HeaderRow = Backgrid.Row.extend({\n\n  requiredOptions: [\"columns\", \"collection\"],\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns\n     @param {Backgrid.HeaderCell} [options.headerCell] Customized default\n     HeaderCell for all the columns. Supply a HeaderCell class or instance to a\n     the `headerCell` key in a column definition for column-specific header\n     rendering.\n\n     @throws {TypeError} If options.columns or options.collection is undefined.\n   */\n  initialize: function () {\n    Backgrid.Row.prototype.initialize.apply(this, arguments);\n  },\n\n  makeCell: function (column, options) {\n    var headerCell = column.get(\"headerCell\") || options.headerCell || HeaderCell;\n    headerCell = new headerCell({\n      column: column,\n      collection: this.collection\n    });\n    return headerCell;\n  }\n\n});\n\n/**\n   Header is a special structural view class that renders a table head with a\n   single row of header cells.\n\n   @class Backgrid.Header\n   @extends Backbone.View\n */\nvar Header = Backgrid.Header = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"thead\",\n\n  /**\n     Initializer. Initializes this table head view to contain a single header\n     row view.\n\n     @param {Object} options\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns Column metadata.\n     @param {Backbone.Model} options.model The model instance to render.\n\n     @throws {TypeError} If options.columns or options.model is undefined.\n   */\n  initialize: function (options) {\n    this.columns = options.columns;\n    if (!(this.columns instanceof Backbone.Collection)) {\n      this.columns = new Columns(this.columns);\n    }\n\n    this.row = new Backgrid.HeaderRow({\n      columns: this.columns,\n      collection: this.collection\n    });\n  },\n\n  /**\n     Renders this table head with a single row of header cells.\n   */\n  render: function () {\n    this.$el.append(this.row.render().$el);\n    this.delegateEvents();\n    return this;\n  },\n\n  /**\n     Clean up this header and its row.\n\n     @chainable\n   */\n  remove: function () {\n    this.row.remove.apply(this.row, arguments);\n    return Backbone.View.prototype.remove.apply(this, arguments);\n  }\n\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   Body is the table body which contains the rows inside a table. Body is\n   responsible for refreshing the rows after sorting, insertion and removal.\n\n   @class Backgrid.Body\n   @extends Backbone.View\n*/\nvar Body = Backgrid.Body = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"tbody\",\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backbone.Collection} options.collection\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns\n     Column metadata.\n     @param {Backgrid.Row} [options.row=Backgrid.Row] The Row class to use.\n     @param {string|function(): string} [options.emptyText] The text to display in the empty row.\n\n     @throws {TypeError} If options.columns or options.collection is undefined.\n\n     See Backgrid.Row.\n  */\n  initialize: function (options) {\n\n    this.columns = options.columns;\n    if (!(this.columns instanceof Backbone.Collection)) {\n      this.columns = new Columns(this.columns);\n    }\n\n    this.row = options.row || Row;\n    this.rows = this.collection.map(function (model) {\n      var row = new this.row({\n        columns: this.columns,\n        model: model\n      });\n\n      return row;\n    }, this);\n\n    this.emptyText = options.emptyText;\n    this._unshiftEmptyRowMayBe();\n\n    var collection = this.collection;\n    this.listenTo(collection, \"add\", this.insertRow);\n    this.listenTo(collection, \"remove\", this.removeRow);\n    this.listenTo(collection, \"sort\", this.refresh);\n    this.listenTo(collection, \"reset\", this.refresh);\n    this.listenTo(collection, \"backgrid:sort\", this.sort);\n    this.listenTo(collection, \"backgrid:edited\", this.moveToNextCell);\n  },\n\n  _unshiftEmptyRowMayBe: function () {\n    if (this.rows.length === 0 && this.emptyText != null) {\n      this.rows.unshift(new EmptyRow({\n        emptyText: this.emptyText,\n        columns: this.columns\n      }));\n    }\n  },\n\n  /**\n     This method can be called either directly or as a callback to a\n     [Backbone.Collecton#add](http://backbonejs.org/#Collection-add) event.\n\n     When called directly, it accepts a model or an array of models and an\n     option hash just like\n     [Backbone.Collection#add](http://backbonejs.org/#Collection-add) and\n     delegates to it. Once the model is added, a new row is inserted into the\n     body and automatically rendered.\n\n     When called as a callback of an `add` event, splices a new row into the\n     body and renders it.\n\n     @param {Backbone.Model} model The model to render as a row.\n     @param {Backbone.Collection} collection When called directly, this\n     parameter is actually the options to\n     [Backbone.Collection#add](http://backbonejs.org/#Collection-add).\n     @param {Object} options When called directly, this must be null.\n\n     See:\n\n     - [Backbone.Collection#add](http://backbonejs.org/#Collection-add)\n  */\n  insertRow: function (model, collection, options) {\n\n    if (this.rows[0] instanceof EmptyRow) this.rows.pop().remove();\n\n    // insertRow() is called directly\n    if (!(collection instanceof Backbone.Collection) && !options) {\n      this.collection.add(model, (options = collection));\n      return;\n    }\n\n    var row = new this.row({\n      columns: this.columns,\n      model: model\n    });\n\n    var index = collection.indexOf(model);\n    this.rows.splice(index, 0, row);\n\n    var $el = this.$el;\n    var $children = $el.children();\n    var $rowEl = row.render().$el;\n\n    if (index >= $children.length) {\n      $el.append($rowEl);\n    }\n    else {\n      $children.eq(index).before($rowEl);\n    }\n\n    return this;\n  },\n\n  /**\n     The method can be called either directly or as a callback to a\n     [Backbone.Collection#remove](http://backbonejs.org/#Collection-remove)\n     event.\n\n     When called directly, it accepts a model or an array of models and an\n     option hash just like\n     [Backbone.Collection#remove](http://backbonejs.org/#Collection-remove) and\n     delegates to it. Once the model is removed, a corresponding row is removed\n     from the body.\n\n     When called as a callback of a `remove` event, splices into the rows and\n     removes the row responsible for rendering the model.\n\n     @param {Backbone.Model} model The model to remove from the body.\n     @param {Backbone.Collection} collection When called directly, this\n     parameter is actually the options to\n     [Backbone.Collection#remove](http://backbonejs.org/#Collection-remove).\n     @param {Object} options When called directly, this must be null.\n\n     See:\n\n     - [Backbone.Collection#remove](http://backbonejs.org/#Collection-remove)\n  */\n  removeRow: function (model, collection, options) {\n\n    // removeRow() is called directly\n    if (!options) {\n      this.collection.remove(model, (options = collection));\n      this._unshiftEmptyRowMayBe();\n      return;\n    }\n\n    if (_.isUndefined(options.render) || options.render) {\n      this.rows[options.index].remove();\n    }\n\n    this.rows.splice(options.index, 1);\n    this._unshiftEmptyRowMayBe();\n\n    return this;\n  },\n\n  /**\n     Reinitialize all the rows inside the body and re-render them. Triggers a\n     Backbone `backgrid:refresh` event from the collection along with the body\n     instance as its sole parameter when done.\n  */\n  refresh: function () {\n    for (var i = 0; i < this.rows.length; i++) {\n      this.rows[i].remove();\n    }\n\n    this.rows = this.collection.map(function (model) {\n      var row = new this.row({\n        columns: this.columns,\n        model: model\n      });\n\n      return row;\n    }, this);\n    this._unshiftEmptyRowMayBe();\n\n    this.render();\n\n    this.collection.trigger(\"backgrid:refresh\", this);\n\n    return this;\n  },\n\n  /**\n     Renders all the rows inside this body. If the collection is empty and\n     `options.emptyText` is defined and not null in the constructor, an empty\n     row is rendered, otherwise no row is rendered.\n  */\n  render: function () {\n    this.$el.empty();\n\n    var fragment = document.createDocumentFragment();\n    for (var i = 0; i < this.rows.length; i++) {\n      var row = this.rows[i];\n      fragment.appendChild(row.render().el);\n    }\n\n    this.el.appendChild(fragment);\n\n    this.delegateEvents();\n\n    return this;\n  },\n\n  /**\n     Clean up this body and it's rows.\n\n     @chainable\n  */\n  remove: function () {\n    for (var i = 0; i < this.rows.length; i++) {\n      var row = this.rows[i];\n      row.remove.apply(row, arguments);\n    }\n    return Backbone.View.prototype.remove.apply(this, arguments);\n  },\n\n  /**\n     If the underlying collection is a Backbone.PageableCollection in\n     server-mode or infinite-mode, a page of models is fetched after sorting is\n     done on the server.\n\n     If the underlying collection is a Backbone.PageableCollection in\n     client-mode, or any\n     [Backbone.Collection](http://backbonejs.org/#Collection) instance, sorting\n     is done on the client side. If the collection is an instance of a\n     Backbone.PageableCollection, sorting will be done globally on all the pages\n     and the current page will then be returned.\n\n     Triggers a Backbone `backgrid:sorted` event from the collection when done\n     with the column, direction and a reference to the collection.\n\n     @param {Backgrid.Column} column\n     @param {null|\"ascending\"|\"descending\"} direction\n\n     See [Backbone.Collection#comparator](http://backbonejs.org/#Collection-comparator)\n  */\n  sort: function (column, direction) {\n\n    if (!_.contains([\"ascending\", \"descending\", null], direction)) {\n      throw new RangeError('direction must be one of \"ascending\", \"descending\" or `null`');\n    }\n\n    if (_.isString(column)) column = this.columns.findWhere({name: column});\n\n    var collection = this.collection;\n\n    var order;\n    if (direction === \"ascending\") order = -1;\n    else if (direction === \"descending\") order = 1;\n    else order = null;\n\n    var comparator = this.makeComparator(column.get(\"name\"), order,\n                                         order ?\n                                         column.sortValue() :\n                                         function (model) {\n                                           return model.cid.replace('c', '') * 1;\n                                         });\n\n    if (Backbone.PageableCollection &&\n        collection instanceof Backbone.PageableCollection) {\n\n      collection.setSorting(order && column.get(\"name\"), order,\n                            {sortValue: column.sortValue()});\n\n      if (collection.fullCollection) {\n        // If order is null, pageable will remove the comparator on both sides,\n        // in this case the default insertion order comparator needs to be\n        // attached to get back to the order before sorting.\n        if (collection.fullCollection.comparator == null) {\n          collection.fullCollection.comparator = comparator;\n        }\n        collection.fullCollection.sort();\n        collection.trigger(\"backgrid:sorted\", column, direction, collection);\n      }\n      else collection.fetch({reset: true, success: function () {\n        collection.trigger(\"backgrid:sorted\", column, direction, collection);\n      }});\n    }\n    else {\n      collection.comparator = comparator;\n      collection.sort();\n      collection.trigger(\"backgrid:sorted\", column, direction, collection);\n    }\n\n    column.set(\"direction\", direction);\n\n    return this;\n  },\n\n  makeComparator: function (attr, order, func) {\n\n    return function (left, right) {\n      // extract the values from the models\n      var l = func(left, attr), r = func(right, attr), t;\n\n      // if descending order, swap left and right\n      if (order === 1) t = l, l = r, r = t;\n\n      // compare as usual\n      if (l === r) return 0;\n      else if (l < r) return -1;\n      return 1;\n    };\n  },\n\n  /**\n     Moves focus to the next renderable and editable cell and return the\n     currently editing cell to display mode.\n\n     Triggers a `backgrid:next` event on the model with the indices of the row\n     and column the user *intended* to move to, and whether the intended move\n     was going to go out of bounds. Note that *out of bound* always means an\n     attempt to go past the end of the last row.\n\n     @param {Backbone.Model} model The originating model\n     @param {Backgrid.Column} column The originating model column\n     @param {Backgrid.Command} command The Command object constructed from a DOM\n     event\n  */\n  moveToNextCell: function (model, column, command) {\n    var i = this.collection.indexOf(model);\n    var j = this.columns.indexOf(column);\n    var cell, renderable, editable, m, n;\n\n    this.rows[i].cells[j].exitEditMode();\n\n    if (command.moveUp() || command.moveDown() || command.moveLeft() ||\n        command.moveRight() || command.save()) {\n      var l = this.columns.length;\n      var maxOffset = l * this.collection.length;\n\n      if (command.moveUp() || command.moveDown()) {\n        m = i + (command.moveUp() ? -1 : 1);\n        var row = this.rows[m];\n        if (row) {\n          cell = row.cells[j];\n          if (Backgrid.callByNeed(cell.column.editable(), cell.column, model)) {\n            cell.enterEditMode();\n            model.trigger(\"backgrid:next\", m, j, false);\n          }\n        }\n        else model.trigger(\"backgrid:next\", m, j, true);\n      }\n      else if (command.moveLeft() || command.moveRight()) {\n        var right = command.moveRight();\n        for (var offset = i * l + j + (right ? 1 : -1);\n             offset >= 0 && offset < maxOffset;\n             right ? offset++ : offset--) {\n          m = ~~(offset / l);\n          n = offset - m * l;\n          cell = this.rows[m].cells[n];\n          renderable = Backgrid.callByNeed(cell.column.renderable(), cell.column, cell.model);\n          editable = Backgrid.callByNeed(cell.column.editable(), cell.column, model);\n          if (renderable && editable) {\n            cell.enterEditMode();\n            model.trigger(\"backgrid:next\", m, n, false);\n            break;\n          }\n        }\n\n        if (offset == maxOffset) {\n          model.trigger(\"backgrid:next\", ~~(offset / l), offset - m * l, true);\n        }\n      }\n    }\n\n    return this;\n  }\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   A Footer is a generic class that only defines a default tag `tfoot` and\n   number of required parameters in the initializer.\n\n   @abstract\n   @class Backgrid.Footer\n   @extends Backbone.View\n */\nvar Footer = Backgrid.Footer = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"tfoot\",\n\n  /**\n     Initializer.\n\n     @param {Object} options\n     @param {Backbone.Collection.<Backgrid.Column>|Array.<Backgrid.Column>|Array.<Object>} options.columns\n     Column metadata.\n     @param {Backbone.Collection} options.collection\n\n     @throws {TypeError} If options.columns or options.collection is undefined.\n  */\n  initialize: function (options) {\n    this.columns = options.columns;\n    if (!(this.columns instanceof Backbone.Collection)) {\n      this.columns = new Backgrid.Columns(this.columns);\n    }\n  }\n\n});\n\n/*\n  backgrid\n  http://github.com/wyuenho/backgrid\n\n  Copyright (c) 2013 Jimmy Yuen Ho Wong and contributors\n  Licensed under the MIT license.\n*/\n\n/**\n   Grid represents a data grid that has a header, body and an optional footer.\n\n   By default, a Grid treats each model in a collection as a row, and each\n   attribute in a model as a column. To render a grid you must provide a list of\n   column metadata and a collection to the Grid constructor. Just like any\n   Backbone.View class, the grid is rendered as a DOM node fragment when you\n   call render().\n\n       var grid = Backgrid.Grid({\n         columns: [{ name: \"id\", label: \"ID\", type: \"string\" },\n          // ...\n         ],\n         collections: books\n       });\n\n       $(\"#table-container\").append(grid.render().el);\n\n   Optionally, if you want to customize the rendering of the grid's header and\n   footer, you may choose to extend Backgrid.Header and Backgrid.Footer, and\n   then supply that class or an instance of that class to the Grid constructor.\n   See the documentation for Header and Footer for further details.\n\n       var grid = Backgrid.Grid({\n         columns: [{ name: \"id\", label: \"ID\", type: \"string\" }],\n         collections: books,\n         header: Backgrid.Header.extend({\n              //...\n         }),\n         footer: Backgrid.Paginator\n       });\n\n   Finally, if you want to override how the rows are rendered in the table body,\n   you can supply a Body subclass as the `body` attribute that uses a different\n   Row class.\n\n   @class Backgrid.Grid\n   @extends Backbone.View\n\n   See:\n\n   - Backgrid.Column\n   - Backgrid.Header\n   - Backgrid.Body\n   - Backgrid.Row\n   - Backgrid.Footer\n*/\nvar Grid = Backgrid.Grid = Backbone.View.extend({\n\n  /** @property */\n  tagName: \"table\",\n\n  /** @property */\n  className: \"backgrid\",\n\n  /** @property */\n  header: Header,\n\n  /** @property */\n  body: Body,\n\n  /** @property */\n  footer: null,\n\n  /**\n     Initializes a Grid instance.\n\n     @param {Object} options\n     @param {Backbone.Collection.<Backgrid.Columns>|Array.<Backgrid.Column>|Array.<Object>} options.columns Column metadata.\n     @param {Backbone.Collection} options.collection The collection of tabular model data to display.\n     @param {Backgrid.Header} [options.header=Backgrid.Header] An optional Header class to override the default.\n     @param {Backgrid.Body} [options.body=Backgrid.Body] An optional Body class to override the default.\n     @param {Backgrid.Row} [options.row=Backgrid.Row] An optional Row class to override the default.\n     @param {Backgrid.Footer} [options.footer=Backgrid.Footer] An optional Footer class.\n   */\n  initialize: function (options) {\n    // Convert the list of column objects here first so the subviews don't have\n    // to.\n    if (!(options.columns instanceof Backbone.Collection)) {\n      options.columns = new Columns(options.columns);\n    }\n    this.columns = options.columns;\n\n    var filteredOptions = _.omit(options, [\"el\", \"id\", \"attributes\",\n                                           \"className\", \"tagName\", \"events\"]);\n\n    // must construct body first so it listens to backgrid:sort first\n    this.body = options.body || this.body;\n    this.body = new this.body(filteredOptions);\n\n    this.header = options.header || this.header;\n    if (this.header) {\n      this.header = new this.header(filteredOptions);\n    }\n\n    this.footer = options.footer || this.footer;\n    if (this.footer) {\n      this.footer = new this.footer(filteredOptions);\n    }\n\n    this.listenTo(this.columns, \"reset\", function () {\n      if (this.header) {\n        this.header = new (this.header.remove().constructor)(filteredOptions);\n      }\n      this.body = new (this.body.remove().constructor)(filteredOptions);\n      if (this.footer) {\n        this.footer = new (this.footer.remove().constructor)(filteredOptions);\n      }\n      this.render();\n    });\n  },\n\n  /**\n     Delegates to Backgrid.Body#insertRow.\n   */\n  insertRow: function () {\n    this.body.insertRow.apply(this.body, arguments);\n    return this;\n  },\n\n  /**\n     Delegates to Backgrid.Body#removeRow.\n   */\n  removeRow: function () {\n    this.body.removeRow.apply(this.body, arguments);\n    return this;\n  },\n\n  /**\n     Delegates to Backgrid.Columns#add for adding a column. Subviews can listen\n     to the `add` event from their internal `columns` if rerendering needs to\n     happen.\n\n     @param {Object} [options] Options for `Backgrid.Columns#add`.\n   */\n  insertColumn: function () {\n    this.columns.add.apply(this.columns, arguments);\n    return this;\n  },\n\n  /**\n     Delegates to Backgrid.Columns#remove for removing a column. Subviews can\n     listen to the `remove` event from the internal `columns` if rerendering\n     needs to happen.\n\n     @param {Object} [options] Options for `Backgrid.Columns#remove`.\n   */\n  removeColumn: function () {\n    this.columns.remove.apply(this.columns, arguments);\n    return this;\n  },\n\n  /**\n     Delegates to Backgrid.Body#sort.\n   */\n  sort: function () {\n    this.body.sort.apply(this.body, arguments);\n    return this;\n  },\n\n  /**\n     Renders the grid's header, then footer, then finally the body. Triggers a\n     Backbone `backgrid:rendered` event along with a reference to the grid when\n     the it has successfully been rendered.\n   */\n  render: function () {\n    this.$el.empty();\n\n    if (this.header) {\n      this.$el.append(this.header.render().$el);\n    }\n\n    if (this.footer) {\n      this.$el.append(this.footer.render().$el);\n    }\n\n    this.$el.append(this.body.render().$el);\n\n    this.delegateEvents();\n\n    this.trigger(\"backgrid:rendered\", this);\n\n    return this;\n  },\n\n  /**\n     Clean up this grid and its subviews.\n\n     @chainable\n   */\n  remove: function () {\n    this.header && this.header.remove.apply(this.header, arguments);\n    this.body.remove.apply(this.body, arguments);\n    this.footer && this.footer.remove.apply(this.footer, arguments);\n    return Backbone.View.prototype.remove.apply(this, arguments);\n  }\n\n});\nreturn Backgrid;\n}));",
			"file": "app/bower_components/backgrid/lib/backgrid.js",
			"file_size": 85456,
			"file_write_time": 130347823500000000,
			"settings":
			{
				"buffer_size": 85457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/scripts/routes/home.js",
			"settings":
			{
				"buffer_size": 2069,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Gruntfile.js",
			"settings":
			{
				"buffer_size": 11509,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 1150 files for \"<%=\"\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/Gruntfile.js:\n   34              },\n   35              compass: {\n   36:                 files: ['<%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n   37                  tasks: ['compass']\n   38              },\n   ..\n   42                  },\n   43                  files: [\n   44:                     '<%= yeoman.app %>/*.html',\n   45:                     '{.tmp,<%= yeoman.app %>}/styles/{,*/}*.css',\n   46:                     '{.tmp,<%= yeoman.app %>}/scripts/{,*/}*.js',\n   47:                     '{.tmp,<%= yeoman.app %>}/scripts/{,*/}**/*.js',\n   48:                     '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n   49:                     '<%= yeoman.app %>/scripts/templates/**/*.{ejs,mustache,hbs}',\n   50                      'test/spec/**/*.js'\n   51                  ]\n   ..\n   53              jst: {\n   54                  files: [\n   55:                     '<%= yeoman.app %>/scripts/templates/**/*.ejs'\n   56                  ],\n   57                  tasks: ['jst']\n   ..\n  114          open: {\n  115              server: {\n  116:                 path: 'http://localhost:<%= connect.options.port %>'\n  117              },\n  118              test: {\n  119:                 path: 'http://localhost:<%= connect.test.options.port %>'\n  120              }\n  121          },\n  122          clean: {\n  123:             dist: ['.tmp', '<%= yeoman.dist %>/*'],\n  124              server: '.tmp'\n  125          },\n  ...\n  131              all: [\n  132                  'Gruntfile.js',\n  133:                 '<%= yeoman.app %>/scripts/{,*/}*.js',\n  134:                 '!<%= yeoman.app %>/scripts/vendor/*',\n  135                  'test/spec/{,*/}*.js'\n  136              ]\n  ...\n  140                  options: {\n  141                      run: true,\n  142:                     urls: ['http://localhost:<%= connect.test.options.port %>/index.html']\n  143                  }\n  144              }\n  ...\n  146          compass: {\n  147              options: {\n  148:                 sassDir: '<%= yeoman.app %>/styles',\n  149                  cssDir: '.tmp/styles',\n  150:                 imagesDir: '<%= yeoman.app %>/images',\n  151:                 javascriptsDir: '<%= yeoman.app %>/scripts',\n  152:                 fontsDir: '<%= yeoman.app %>/styles/fonts',\n  153:                 importPath: '<%= yeoman.app %>/bower_components',\n  154                  relativeAssets: true\n  155              },\n  ...\n  168          },*/\n  169          useminPrepare: {\n  170:             html: '<%= yeoman.app %>/index.html',\n  171              options: {\n  172:                 dest: '<%= yeoman.dist %>'\n  173              }\n  174          },\n  175          usemin: {\n  176:             html: ['<%= yeoman.dist %>/{,*/}*.html'],\n  177:             css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],\n  178              options: {\n  179:                 dirs: ['<%= yeoman.dist %>']\n  180              }\n  181          },\n  ...\n  184                  files: [{\n  185                      expand: true,\n  186:                     cwd: '<%= yeoman.app %>/images',\n  187                      src: '{,*/}*.{png,jpg,jpeg}',\n  188:                     dest: '<%= yeoman.dist %>/images'\n  189                  }]\n  190              }\n  ...\n  193              dist: {\n  194                  files: {\n  195:                     '<%= yeoman.dist %>/styles/main.css': [\n  196                          '.tmp/styles/{,*/}*.css',\n  197:                         '<%= yeoman.app %>/styles/{,*/}*.css'\n  198                      ]\n  199                  }\n  ...\n  215                  files: [{\n  216                      expand: true,\n  217:                     cwd: '<%= yeoman.app %>',\n  218                      src: '*.html',\n  219:                     dest: '<%= yeoman.dist %>'\n  220                  }]\n  221              }\n  ...\n  226                      expand: true,\n  227                      dot: true,\n  228:                     cwd: '<%= yeoman.app %>',\n  229:                     dest: '<%= yeoman.dist %>',\n  230                      src: [\n  231                          '*.{ico,txt}',\n  ...\n  236                  }, {\n  237                      src: 'node_modules/apache-server-configs/dist/.htaccess',\n  238:                     dest: '<%= yeoman.dist %>/.htaccess'\n  239                  }]\n  240              }\n  ...\n  248                  },\n  249                  files: {\n  250:                     '.tmp/scripts/templates.js': ['<%= yeoman.app %>/scripts/templates/**/*.ejs']\n  251                  }\n  252              }\n  ...\n  256                  files: {\n  257                      src: [\n  258:                         '<%= yeoman.dist %>/scripts/{,*/}*.js',\n  259:                         '<%= yeoman.dist %>/styles/{,*/}*.css',\n  260:                         '<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n  261                          '/styles/fonts/{,*/}*.*',\n  262                          'bower_components/sass-bootstrap/fonts/*.*'\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/js/backgrid.js:\n 1400  \n 1401    /** @property {function(Object, ?Object=): string} template */\n 1402:   template: _.template('<option value=\"<%- value %>\" <%= selected ? \\'selected=\"selected\"\\' : \"\" %>><%- text %></option>', null, {variable: null}),\n 1403  \n 1404    setOptionValues: function (optionValues) {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/js/underscore.js:\n 1138    _.templateSettings = {\n 1139      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1140:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1141      escape      : /<%-([\\s\\S]+?)%>/g\n 1142    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/js/extensions/text-cell/backgrid-text-cell.js:\n   33  \n   34      /** @property {function(Object, ?Object=): string} template */\n   35:     template: _.template('<div class=\"modal-dialog\"><div class=\"modal-content\"><form><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h3><%- column.get(\"label\") %></h3></div><div class=\"modal-body\"><textarea cols=\"<%= cols %>\" rows=\"<%= rows %>\"><%- content %></textarea></div><div class=\"modal-footer\"><input class=\"btn btn-primary\" type=\"submit\" value=\"Save\"/></div></form></div></div>', null, {variable: null}),\n   36  \n   37      /** @property */\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/test/vendor/underscore.js:\n 1193    _.templateSettings = {\n 1194      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1195:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1196      escape      : /<%-([\\s\\S]+?)%>/g\n 1197    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.babysitter/Gruntfile.js:\n    6      pkg: grunt.file.readJSON('package.json'),\n    7      meta: {\n    8:       version: '<%= pkg.version %>',\n    9        banner:\n   10          '// Backbone.BabySitter\\n' +\n   11          '// -------------------\\n' +\n   12:         '// v<%= pkg.version %>\\n' +\n   13          '//\\n' +\n   14:         '// Copyright (c)<%= grunt.template.today(\"yyyy\") %> Derick Bailey, Muted Solutions, LLC.\\n' +\n   15          '// Distributed under MIT license\\n' +\n   16          '//\\n' +\n   ..\n   33        options: {\n   34          data: {\n   35:           version: '<%= meta.version %>'\n   36          }\n   37        },\n   38        umd: {\n   39:         src: '<%= preprocess.umd.dest %>',\n   40:         dest: '<%= preprocess.umd.dest %>'\n   41        }\n   42      },\n   ..\n   44      concat: {\n   45        options: {\n   46:         banner: \"<%= meta.banner %>\"\n   47        },\n   48        umd: {\n   49:         src: '<%= preprocess.umd.dest %>',\n   50:         dest: '<%= preprocess.umd.dest %>'\n   51        }\n   52      },\n   ..\n   54      uglify : {\n   55        options: {\n   56:         banner: \"<%= meta.banner %>\"\n   57        },\n   58        umd : {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.babysitter/public/javascripts/underscore.js:\n 1089    _.templateSettings = {\n 1090      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1091:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1092      escape      : /<%-([\\s\\S]+?)%>/g\n 1093    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.babysitter/src/build/backbone.babysitter.js:\n   20    // @include ../childviewcontainer.js\n   21  \n   22:   Backbone.ChildViewContainer.VERSION = '<%= version %>';\n   23  \n   24    Backbone.ChildViewContainer.noConflict = function () {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/js/backgrid.js:\n 1400  \n 1401    /** @property {function(Object, ?Object=): string} template */\n 1402:   template: _.template('<option value=\"<%- value %>\" <%= selected ? \\'selected=\"selected\"\\' : \"\" %>><%- text %></option>', null, {variable: null}),\n 1403  \n 1404    setOptionValues: function (optionValues) {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/js/underscore.js:\n 1138    _.templateSettings = {\n 1139      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1140:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1141      escape      : /<%-([\\s\\S]+?)%>/g\n 1142    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/js/extensions/text-cell/backgrid-text-cell.js:\n   33  \n   34      /** @property {function(Object, ?Object=): string} template */\n   35:     template: _.template('<div class=\"modal-dialog\"><div class=\"modal-content\"><form><div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button><h3><%- column.get(\"label\") %></h3></div><div class=\"modal-body\"><textarea cols=\"<%= cols %>\" rows=\"<%= rows %>\"><%- content %></textarea></div><div class=\"modal-footer\"><input class=\"btn btn-primary\" type=\"submit\" value=\"Save\"/></div></form></div></div>', null, {variable: null}),\n   36  \n   37      /** @property */\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/test/vendor/underscore.js:\n 1193    _.templateSettings = {\n 1194      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1195:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1196      escape      : /<%-([\\s\\S]+?)%>/g\n 1197    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.wreqr/Gruntfile.js:\n    6      pkg: grunt.file.readJSON('package.json'),\n    7      meta: {\n    8:       version: '<%= pkg.version %>',\n    9        banner:\n   10          '// Backbone.Wreqr (Backbone.Marionette)\\n' +\n   11          '// ----------------------------------\\n' +\n   12:         '// v<%= pkg.version %>\\n' +\n   13          '//\\n' +\n   14:         '// Copyright (c)<%= grunt.template.today(\"yyyy\") %> Derick Bailey, Muted Solutions, LLC.\\n' +\n   15          '// Distributed under MIT license\\n' +\n   16          '//\\n' +\n   ..\n   33        options: {\n   34          data: {\n   35:           version: '<%= meta.version %>'\n   36          }\n   37        },\n   38        umd: {\n   39:         src: '<%= preprocess.umd.dest %>',\n   40:         dest: '<%= preprocess.umd.dest %>'\n   41        }\n   42      },\n   ..\n   44      concat: {\n   45        options: {\n   46:         banner: \"<%= meta.banner %>\"\n   47        },\n   48        umd: {\n   49:         src: '<%= preprocess.umd.dest %>',\n   50:         dest: '<%= preprocess.umd.dest %>'\n   51        }\n   52      },\n   ..\n   54      uglify : {\n   55        options: {\n   56:         banner: \"<%= meta.banner %>\"\n   57        },\n   58        umd : {\n   ..\n   82        },\n   83        coverage : {\n   84:         src : '<%= jasmine.wreqr.src %>',\n   85          options : {\n   86            template : require('grunt-template-jasmine-istanbul'),\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.wreqr/public/javascripts/underscore.js:\n  916    _.templateSettings = {\n  917      evaluate    : /<%([\\s\\S]+?)%>/g,\n  918:     interpolate : /<%=([\\s\\S]+?)%>/g,\n  919      escape      : /<%-([\\s\\S]+?)%>/g\n  920    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.wreqr/src/build/backbone.wreqr.js:\n   20    var Wreqr = Backbone.Wreqr = {};\n   21  \n   22:   Backbone.Wreqr.VERSION = '<%= version %>';\n   23  \n   24    Backbone.Wreqr.noConflict = function () {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/Gruntfile.js:\n   38        backgrid: {\n   39          options: {\n   40:           banner: '/*!\\n  <%= pkg.name %>\\n' +\n   41:             '  <%= pkg.repository.url %>\\n\\n' +\n   42:             '  Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author %>\\n' +\n   43              '  Licensed under the MIT license.\\n' +\n   44              '*/\\n\\n' +\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/lib/backgrid.js:\n 1400  \n 1401    /** @property {function(Object, ?Object=): string} template */\n 1402:   template: _.template('<option value=\"<%- value %>\" <%= selected ? \\'selected=\"selected\"\\' : \"\" %>><%- text %></option>', null, {variable: null}),\n 1403  \n 1404    setOptionValues: function (optionValues) {\n\n~/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/lib/backgrid.min.js:\n    <binary>\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/src/cell.js:\n  784  \n  785    /** @property {function(Object, ?Object=): string} template */\n  786:   template: _.template('<option value=\"<%- value %>\" <%= selected ? \\'selected=\"selected\"\\' : \"\" %>><%- text %></option>', null, {variable: null}),\n  787  \n  788    setOptionValues: function (optionValues) {\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/grunt.js:\n    7            version: '2.7.2',\n    8            banner: '/*!\\n' +\n    9:             ' * Modernizr v<%= meta.version %>\\n' +\n   10              ' * www.modernizr.com\\n *\\n' +\n   11              ' * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\\n' +\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/typeahead.js/Gruntfile.js:\n   37      banner: [\n   38        '/*!',\n   39:       ' * typeahead.js <%= version %>',\n   40        ' * https://github.com/twitter/typeahead.js',\n   41:       ' * Copyright 2013-<%= grunt.template.today(\"yyyy\") %> Twitter, Inc. and other contributors; Licensed MIT',\n   42        ' */\\n\\n'\n   43      ].join('\\n'),\n   ..\n   45      uglify: {\n   46        options: {\n   47:         banner: '<%= banner %>',\n   48          enclose: { 'window.jQuery': '$' }\n   49        },\n   ..\n   55          },\n   56          src: files.common.concat(files.bloodhound),\n   57:         dest: '<%= buildDir %>/bloodhound.js'\n   58        },\n   59        bloodhoundMin: {\n   ..\n   63          },\n   64          src: files.common.concat(files.bloodhound),\n   65:         dest: '<%= buildDir %>/bloodhound.min.js'\n   66        },\n   67        typeahead: {\n   ..\n   72          },\n   73          src: files.common.concat(files.typeahead),\n   74:         dest: '<%= buildDir %>/typeahead.jquery.js'\n   75  \n   76        },\n   ..\n   81          },\n   82          src: files.common.concat(files.typeahead),\n   83:         dest: '<%= buildDir %>/typeahead.jquery.min.js'\n   84  \n   85        },\n   ..\n   91          },\n   92          src: files.common.concat(files.bloodhound, files.typeahead),\n   93:         dest: '<%= buildDir %>/typeahead.bundle.js'\n   94  \n   95        },\n   ..\n  100          },\n  101          src: files.common.concat(files.bloodhound, files.typeahead),\n  102:         dest: '<%= buildDir %>/typeahead.bundle.min.js'\n  103        }\n  104      },\n  ...\n  107        version: {\n  108          pattern: '%VERSION%',\n  109:         replacement: '<%= version %>',\n  110          recursive: true,\n  111:         path: '<%= buildDir %>'\n  112        }\n  113      },\n  ...\n  142        },\n  143        publish_assets: [\n  144:         'cp -r <%= buildDir %> typeahead.js',\n  145          'zip -r typeahead.js/typeahead.js.zip typeahead.js',\n  146          'git checkout gh-pages',\n  147          'rm -rf releases/latest',\n  148:         'cp -r typeahead.js releases/<%= version %>',\n  149          'cp -r typeahead.js releases/latest',\n  150:         'git add releases/<%= version %> releases/latest',\n  151:         'sed -E -i \"\" \\'s/v[0-9]+\\\\.[0-9]+\\\\.[0-9]+/v<%= version %>/\\' index.html',\n  152          'git add index.html',\n  153:         'git commit -m \"Add assets for <%= version %>.\"',\n  154          'git push',\n  155          'git checkout -',\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/index.html:\n 1704  \n 1705        <pre>\n 1706: _.template(\"Using 'with': <%= data.answer %>\", {answer: 'no'}, {variable: 'data'});\n 1707  =&gt; \"Using 'with': no\"</pre>\n 1708  \n ....\n 1716  \n 1717        <pre>&lt;script&gt;\n 1718:   JST.project = <%= _.template(jstText).source %>;\n 1719  &lt;/script&gt;</pre>\n 1720  \n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/underscore-min.js:\n    3  //     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n    4  //     Underscore may be freely distributed under the MIT license.\n    5: (function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,w=Object.keys,_=i.bind,j=function(n){return n instanceof j?n:this instanceof j?(this._wrapped=n,void 0):new j(n)};\"undefined\"!=typeof exports?(\"undefined\"!=typeof module&&module.exports&&(exports=module.exports=j),exports._=j):n._=j,j.VERSION=\"1.5.2\";var A=j.each=j.forEach=function(n,t,e){if(null!=n)if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a=j.keys(n),u=0,i=a.length;i>u;u++)if(t.call(e,n[a[u]],a[u],n)===r)return};j.map=j.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e.push(t.call(r,n,u,i))}),e)};var E=\"Reduce of empty array with no initial value\";j.reduce=j.foldl=j.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=j.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(E);return r},j.reduceRight=j.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=j.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=j.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(E);return r},j.find=j.detect=function(n,t,r){var e;return O(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},j.filter=j.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&e.push(n)}),e)},j.reject=function(n,t,r){return j.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},j.every=j.all=function(n,t,e){t||(t=j.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var O=j.some=j.any=function(n,t,e){t||(t=j.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};j.contains=j.include=function(n,t){return null==n?!1:y&&n.indexOf===y?n.indexOf(t)!=-1:O(n,function(n){return n===t})},j.invoke=function(n,t){var r=o.call(arguments,2),e=j.isFunction(t);return j.map(n,function(n){return(e?t:n[t]).apply(n,r)})},j.pluck=function(n,t){return j.map(n,function(n){return n[t]})},j.where=function(n,t,r){return j.isEmpty(t)?r?void 0:[]:j[r?\"find\":\"filter\"](n,function(n){for(var r in t)if(t[r]!==n[r])return!1;return!0})},j.findWhere=function(n,t){return j.where(n,t,!0)},j.max=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.max.apply(Math,n);if(!t&&j.isEmpty(n))return-1/0;var e={computed:-1/0,value:-1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;a>e.computed&&(e={value:n,computed:a})}),e.value},j.min=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.min.apply(Math,n);if(!t&&j.isEmpty(n))return 1/0;var e={computed:1/0,value:1/0};return A(n,function(n,u,i){var a=t?t.call(r,n,u,i):n;a<e.computed&&(e={value:n,computed:a})}),e.value},j.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=j.random(r++),e[r-1]=e[t],e[t]=n}),e},j.sample=function(n,t,r){return arguments.length<2||r?n[j.random(n.length-1)]:j.shuffle(n).slice(0,Math.max(0,t))};var k=function(n){return j.isFunction(n)?n:function(t){return t[n]}};j.sortBy=function(n,t,r){var e=k(t);return j.pluck(j.map(n,function(n,t,u){return{value:n,index:t,criteria:e.call(r,n,t,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),\"value\")};var F=function(n){return function(t,r,e){var u={},i=null==r?j.identity:k(r);return A(t,function(r,a){var o=i.call(e,r,a,t);n(u,o,r)}),u}};j.groupBy=F(function(n,t,r){(j.has(n,t)?n[t]:n[t]=[]).push(r)}),j.indexBy=F(function(n,t,r){n[t]=r}),j.countBy=F(function(n,t){j.has(n,t)?n[t]++:n[t]=1}),j.sortedIndex=function(n,t,r,e){r=null==r?j.identity:k(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;r.call(e,n[o])<u?i=o+1:a=o}return i},j.toArray=function(n){return n?j.isArray(n)?o.call(n):n.length===+n.length?j.map(n,j.identity):j.values(n):[]},j.size=function(n){return null==n?0:n.length===+n.length?n.length:j.keys(n).length},j.first=j.head=j.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:o.call(n,0,t)},j.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},j.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},j.rest=j.tail=j.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},j.compact=function(n){return j.filter(n,j.identity)};var M=function(n,t,r){return t&&j.every(n,j.isArray)?c.apply(r,n):(A(n,function(n){j.isArray(n)||j.isArguments(n)?t?a.apply(r,n):M(n,t,r):r.push(n)}),r)};j.flatten=function(n,t){return M(n,t,[])},j.without=function(n){return j.difference(n,o.call(arguments,1))},j.uniq=j.unique=function(n,t,r,e){j.isFunction(t)&&(e=r,r=t,t=!1);var u=r?j.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:j.contains(a,r))||(a.push(r),i.push(n[e]))}),i},j.union=function(){return j.uniq(j.flatten(arguments,!0))},j.intersection=function(n){var t=o.call(arguments,1);return j.filter(j.uniq(n),function(n){return j.every(t,function(t){return j.indexOf(t,n)>=0})})},j.difference=function(n){var t=c.apply(e,o.call(arguments,1));return j.filter(n,function(n){return!j.contains(t,n)})},j.zip=function(){for(var n=j.max(j.pluck(arguments,\"length\").concat(0)),t=new Array(n),r=0;n>r;r++)t[r]=j.pluck(arguments,\"\"+r);return t},j.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},j.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if(\"number\"!=typeof r)return e=j.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},j.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},j.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=new Array(e);e>u;)i[u++]=n,n+=r;return i};var R=function(){};j.bind=function(n,t){var r,e;if(_&&n.bind===_)return _.apply(n,o.call(arguments,1));if(!j.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));R.prototype=n.prototype;var u=new R;R.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},j.partial=function(n){var t=o.call(arguments,1);return function(){return n.apply(this,t.concat(o.call(arguments)))}},j.bindAll=function(n){var t=o.call(arguments,1);if(0===t.length)throw new Error(\"bindAll must be passed function names\");return A(t,function(t){n[t]=j.bind(n[t],n)}),n},j.memoize=function(n,t){var r={};return t||(t=j.identity),function(){var e=t.apply(this,arguments);return j.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},j.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},j.defer=function(n){return j.delay.apply(j,[n,1].concat(o.call(arguments,1)))},j.throttle=function(n,t,r){var e,u,i,a=null,o=0;r||(r={});var c=function(){o=r.leading===!1?0:new Date,a=null,i=n.apply(e,u)};return function(){var l=new Date;o||r.leading!==!1||(o=l);var f=t-(l-o);return e=this,u=arguments,0>=f?(clearTimeout(a),a=null,o=l,i=n.apply(e,u)):a||r.trailing===!1||(a=setTimeout(c,f)),i}},j.debounce=function(n,t,r){var e,u,i,a,o;return function(){i=this,u=arguments,a=new Date;var c=function(){var l=new Date-a;t>l?e=setTimeout(c,t-l):(e=null,r||(o=n.apply(i,u)))},l=r&&!e;return e||(e=setTimeout(c,t)),l&&(o=n.apply(i,u)),o}},j.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},j.wrap=function(n,t){return function(){var r=[n];return a.apply(r,arguments),t.apply(this,r)}},j.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},j.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},j.keys=w||function(n){if(n!==Object(n))throw new TypeError(\"Invalid object\");var t=[];for(var r in n)j.has(n,r)&&t.push(r);return t},j.values=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},j.pairs=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},j.invert=function(n){for(var t={},r=j.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},j.functions=j.methods=function(n){var t=[];for(var r in n)j.isFunction(n[r])&&t.push(r);return t.sort()},j.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},j.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},j.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)j.contains(r,u)||(t[u]=n[u]);return t},j.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]===void 0&&(n[r]=t[r])}),n},j.clone=function(n){return j.isObject(n)?j.isArray(n)?n.slice():j.extend({},n):n},j.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof j&&(n=n._wrapped),t instanceof j&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case\"[object String]\":return n==String(t);case\"[object Number]\":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case\"[object Date]\":case\"[object Boolean]\":return+n==+t;case\"[object RegExp]\":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if(\"object\"!=typeof n||\"object\"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;var a=n.constructor,o=t.constructor;if(a!==o&&!(j.isFunction(a)&&a instanceof a&&j.isFunction(o)&&o instanceof o))return!1;r.push(n),e.push(t);var c=0,f=!0;if(\"[object Array]\"==u){if(c=n.length,f=c==t.length)for(;c--&&(f=S(n[c],t[c],r,e)););}else{for(var s in n)if(j.has(n,s)&&(c++,!(f=j.has(t,s)&&S(n[s],t[s],r,e))))break;if(f){for(s in t)if(j.has(t,s)&&!c--)break;f=!c}}return r.pop(),e.pop(),f};j.isEqual=function(n,t){return S(n,t,[],[])},j.isEmpty=function(n){if(null==n)return!0;if(j.isArray(n)||j.isString(n))return 0===n.length;for(var t in n)if(j.has(n,t))return!1;return!0},j.isElement=function(n){return!(!n||1!==n.nodeType)},j.isArray=x||function(n){return\"[object Array]\"==l.call(n)},j.isObject=function(n){return n===Object(n)},A([\"Arguments\",\"Function\",\"String\",\"Number\",\"Date\",\"RegExp\"],function(n){j[\"is\"+n]=function(t){return l.call(t)==\"[object \"+n+\"]\"}}),j.isArguments(arguments)||(j.isArguments=function(n){return!(!n||!j.has(n,\"callee\"))}),\"function\"!=typeof/./&&(j.isFunction=function(n){return\"function\"==typeof n}),j.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},j.isNaN=function(n){return j.isNumber(n)&&n!=+n},j.isBoolean=function(n){return n===!0||n===!1||\"[object Boolean]\"==l.call(n)},j.isNull=function(n){return null===n},j.isUndefined=function(n){return n===void 0},j.has=function(n,t){return f.call(n,t)},j.noConflict=function(){return n._=t,this},j.identity=function(n){return n},j.times=function(n,t,r){for(var e=Array(Math.max(0,n)),u=0;n>u;u++)e[u]=t.call(r,u);return e},j.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))};var I={escape:{\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\"}};I.unescape=j.invert(I.escape);var T={escape:new RegExp(\"[\"+j.keys(I.escape).join(\"\")+\"]\",\"g\"),unescape:new RegExp(\"(\"+j.keys(I.unescape).join(\"|\")+\")\",\"g\")};j.each([\"escape\",\"unescape\"],function(n){j[n]=function(t){return null==t?\"\":(\"\"+t).replace(T[n],function(t){return I[n][t]})}}),j.result=function(n,t){if(null==n)return void 0;var r=n[t];return j.isFunction(r)?r.call(n):r},j.mixin=function(n){A(j.functions(n),function(t){var r=j[t]=n[t];j.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(j,n))}})};var N=0;j.uniqueId=function(n){var t=++N+\"\";return n?n+t:t},j.templateSettings={evaluate:/<%([\\s\\S]+?)%>/g,interpolate:/<%=([\\s\\S]+?)%>/g,escape:/<%-([\\s\\S]+?)%>/g};var q=/(.)^/,B={\"'\":\"'\",\"\\\\\":\"\\\\\",\"\\r\":\"r\",\"\\n\":\"n\",\"	\":\"t\",\"\\u2028\":\"u2028\",\"\\u2029\":\"u2029\"},D=/\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;j.template=function(n,t,r){var e;r=j.defaults({},r,j.templateSettings);var u=new RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join(\"|\")+\"|$\",\"g\"),i=0,a=\"__p+='\";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(D,function(n){return\"\\\\\"+B[n]}),r&&(a+=\"'+\\n((__t=(\"+r+\"))==null?'':_.escape(__t))+\\n'\"),e&&(a+=\"'+\\n((__t=(\"+e+\"))==null?'':__t)+\\n'\"),u&&(a+=\"';\\n\"+u+\"\\n__p+='\"),i=o+t.length,t}),a+=\"';\\n\",r.variable||(a=\"with(obj||{}){\\n\"+a+\"}\\n\"),a=\"var __t,__p='',__j=Array.prototype.join,\"+\"print=function(){__p+=__j.call(arguments,'');};\\n\"+a+\"return __p;\\n\";try{e=new Function(r.variable||\"obj\",\"_\",a)}catch(o){throw o.source=a,o}if(t)return e(t,j);var c=function(n){return e.call(this,n,j)};return c.source=\"function(\"+(r.variable||\"obj\")+\"){\\n\"+a+\"}\",c},j.chain=function(n){return j(n).chain()};var z=function(n){return this._chain?j(n).chain():n};j.mixin(j),A([\"pop\",\"push\",\"reverse\",\"shift\",\"sort\",\"splice\",\"unshift\"],function(n){var t=e[n];j.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),\"shift\"!=n&&\"splice\"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A([\"concat\",\"join\",\"slice\"],function(n){var t=e[n];j.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),j.extend(j.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}})}).call(this);\n    6  //# sourceMappingURL=underscore-min.map\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/underscore.js:\n 1138    _.templateSettings = {\n 1139      evaluate    : /<%([\\s\\S]+?)%>/g,\n 1140:     interpolate : /<%=([\\s\\S]+?)%>/g,\n 1141      escape      : /<%-([\\s\\S]+?)%>/g\n 1142    };\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/test/index.html:\n   39      // a comment\n   40      if (data) { data += 12345; }; %>\n   41:     <li><%= data %></li>\n   42    </script>\n   43  </body>\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/test/utility.js:\n   89  \n   90    test(\"template\", function() {\n   91:     var basicTemplate = _.template(\"<%= thing %> is gettin' on my noives!\");\n   92      var result = basicTemplate({thing : 'This'});\n   93      equal(result, \"This is gettin' on my noives!\", 'can do basic attribute interpolation');\n   ..\n   96      equal(sansSemicolonTemplate(), \"A  B\");\n   97  \n   98:     var backslashTemplate = _.template(\"<%= thing %> is \\\\ridanculous\");\n   99      equal(backslashTemplate({thing: 'This'}), \"This is \\\\ridanculous\");\n  100  \n  101:     var escapeTemplate = _.template('<%= a ? \"checked=\\\\\"checked\\\\\"\" : \"\" %>');\n  102      equal(escapeTemplate({a: true}), 'checked=\"checked\"', 'can handle slash escapes in interpolations.');\n  103  \n  104      var fancyTemplate = _.template(\"<ul><% \\\n  105        for (var key in people) { \\\n  106:     %><li><%= people[key] %></li><% } %></ul>\");\n  107      result = fancyTemplate({people : {moe : \"Moe\", larry : \"Larry\", curly : \"Curly\"}});\n  108      equal(result, \"<ul><li>Moe</li><li>Larry</li><li>Curly</li></ul>\", 'can run arbitrary javascript in templates');\n  109  \n  110:     var escapedCharsInJavascriptTemplate = _.template(\"<ul><% _.each(numbers.split('\\\\n'), function(item) { %><li><%= item %></li><% }) %></ul>\");\n  111      result = escapedCharsInJavascriptTemplate({numbers: \"one\\ntwo\\nthree\\nfour\"});\n  112      equal(result, \"<ul><li>one</li><li>two</li><li>three</li><li>four</li></ul>\", 'Can use escaped characters (e.g. \\\\n) in Javascript');\n  113  \n  114:     var namespaceCollisionTemplate = _.template(\"<%= pageCount %> <%= thumbnails[pageCount] %> <% _.each(thumbnails, function(p) { %><div class=\\\"thumbnail\\\" rel=\\\"<%= p %>\\\"></div><% }); %>\");\n  115      result = namespaceCollisionTemplate({\n  116        pageCount: 3,\n  ...\n  135      equal(quoteInStatementAndBody({foo: \"bar\"}), \"Statement quotes and 'quotes'.\");\n  136  \n  137:     var withNewlinesAndTabs = _.template('This\\n\\t\\tis: <%= x %>.\\n\\tok.\\nend.');\n  138      equal(withNewlinesAndTabs({x: 'that'}), 'This\\n\\t\\tis: that.\\n\\tok.\\nend.');\n  139  \n  ...\n  144      var stooge = {\n  145        name: \"Moe\",\n  146:       template: _.template(\"I'm <%= this.name %>\")\n  147      };\n  148      equal(stooge.template(), \"I'm Moe\");\n  ...\n  196    test('_.template provides the generated function source, when a SyntaxError occurs', function() {\n  197      try {\n  198:       _.template('<b><%= if x %></b>');\n  199      } catch (ex) {\n  200        var source = ex.source;\n  ...\n  204  \n  205    test('_.template handles \\\\u2028 & \\\\u2029', function() {\n  206:     var tmpl = _.template('<p>\\u2028<%= \"\\\\u2028\\\\u2029\" %>\\u2029</p>');\n  207      strictEqual(tmpl(), '<p>\\u2028\\u2028\\u2029\\u2029</p>');\n  208    });\n  ...\n  218  \n  219    test('_.templateSettings.variable', function() {\n  220:     var s = '<%=data.x%>';\n  221      var data = {x: 'x'};\n  222      strictEqual(_.template(s, data, {variable: 'data'}), 'x');\n  ...\n  232  \n  233    test('#556 - undefined template variables.', function() {\n  234:     var template = _.template('<%=x%>');\n  235      strictEqual(template({x: null}), '');\n  236      strictEqual(template({x: undefined}), '');\n  ...\n  240      strictEqual(templateEscaped({x: undefined}), '');\n  241  \n  242:     var templateWithProperty = _.template('<%=x.foo%>');\n  243      strictEqual(templateWithProperty({x: {} }), '');\n  244      strictEqual(templateWithProperty({x: {} }), '');\n  ...\n  251    test('interpolate evaluates code only once.', 2, function() {\n  252      var count = 0;\n  253:     var template = _.template('<%= f() %>');\n  254      template({f: function(){ ok(!(count++)); }});\n  255  \n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/templates/search-controls-tab.ejs:\n    1: <a href=\"#<%=data.guid%>\" aria-controls=\"home\" role=\"tab\" data-toggle=\"tab\" class=\"searchTab\"><%=data.tabName%></a> <!-- #moveToStyle -->\n\n119 matches across 27 files\n\n\nSearching 1152 files for \"worktitle_facet\"\n\n/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/searchtypes/search-composer-work.js:\n   17          {\n   18  \n   19:             \"facetFields\"    : [\"npp:WorkTitle_facet\"],\n   20              \"attributeNames\" : [\"npp:WorkTitle\"],\n   21              \"displayName\"    : 'Work Title',\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 36930,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "app/scripts/modules/searchtypes/search-composer-work.js",
			"settings":
			{
				"buffer_size": 1045,
				"line_ending": "Windows"
			}
		},
		{
			"file": "app/styles/main.scss",
			"settings":
			{
				"buffer_size": 285,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/index.html",
			"settings":
			{
				"buffer_size": 5298,
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/styles/style.css",
			"settings":
			{
				"buffer_size": 1419,
				"line_ending": "Windows"
			}
		},
		{
			"file": "bower.json",
			"settings":
			{
				"buffer_size": 474,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Nyphil.App.module(\"Search.SearchControls\", function(SearchControls, App, Backbone, Marionette, $, _) {\n	\"use strict\";\n\n	App.module(\"ProgramSearch\").start();\n\n	// this module starts when app.start is called - this could be changed by setting startWithParent to false\n	this.startWithParent = false;\n\n	var SearchControlsLayout = Backbone.Marionette.LayoutView.extend({\n		template: JST['app/scripts/templates/search-controls.ejs'],\n		regions: {\n			\"searchTabs\" : \"#search-tabs\",\n			\"searchTabsContent\" : \"#search-tabs-content\"\n		}\n\n	});\n\n	/**\n	 * Search Tab - Represents a single tab view\n	 */\n	var SearchTab = Backbone.Marionette.ItemView.extend({\n		template: JST['app/scripts/templates/search-controls-tab.ejs'],\n		tagName: \"li\",\n		attributes: { \n			role: \"presentation\"\n		}\n	});\n\n	/**\n	 * SearchTabView - Represents a set of tabs and their wrapper markup\n	 */\n	var SearchTabView = Backbone.Marionette.CollectionView.extend({\n		childView: SearchTab,\n		tagName: \"ul\",\n		className: \"nav nav-tabs\",\n		attributes: {\n			role: \"tablist\"\n		}\n	});\n\n	/**\n	 * SearchContent - The inner content area - contains a region in which the particular search tab (finally) can be inserted\n	 */\n	var SearchContent = Backbone.Marionette.LayoutView.extend({\n		template: JST['app/scripts/templates/search-controls-content.ejs'],\n		className: \"tab-pane\",\n		attributes: {\n			role: \"tabpanel\"\n		},\n		regions: {\n			\"content\": \".panel-content\"\n		},\n		id: function() { \n			return this.model.get(\"guid\");\n		},\n		initialize: function(options) { \n			// set up the submodule\n			this.searchCollection = App.module(\"Search.SearchControls\").searchCollection\n			this.submodule = this.model.get(\"subModule\");\n		},\n		onRender: function() { \n			if(this.submodule) {\n				this.content.show(new this.submodule.LayoutView({ searchCollection: this.searchCollection }));\n			}\n		}\n	});\n\n	/*\n	* SearchContentView - Wrapper for all the tab content panels\n	 */\n	var SearchContentView = Backbone.Marionette.CollectionView.extend({\n		childView: SearchContent,\n		className: \"tab-content\"\n	});\n\n	var searchTabCollection = new Backbone.Collection([\n		{\n			tabName: \"By Program\",\n			guid: \"search-program\",\n			subModule: App.module(\"Search.ProgramSearch\")\n		},\n		{\n			tabName: \"By Composer/Work\",\n			guid: \"search-composer\"\n		},\n		{\n			tabName: \"By Artist\",\n			guid: \"search-artist\"\n		}\n	]);\n\n\n	SearchControls.addInitializer(function() { \n		\n		var searchControls = new SearchControlsLayout();\n\n		var searchTabView = new SearchTabView({\n			collection: searchTabCollection\n		});\n\n		var searchContentView = new SearchContentView({\n			collection: searchTabCollection\n		});\n\n		searchControls.on(\"render\", function() { \n			searchControls.searchTabs.show(searchTabView);\n			searchControls.searchTabsContent.show(searchContentView);\n		});\n		\n		App.layout.currentView.controls.show(searchControls);\n\n	});\n\n	this.on('before:start', function(options){\n		this.searchCollection = options.searchCollection\n	});\n\n});",
			"file": "app/scripts/modules/search/search-controls.js",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 2943,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 94.0,
		"selected_items":
		[
			[
				"syntax bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"package control",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"svn blame",
				"SVN: (File) Blame"
			],
			[
				"ruby",
				"Set Syntax: Ruby"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"shell",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"prettify",
				"HTMLPrettify"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"install pc",
				"Package Control: Install Package"
			],
			[
				"sublimelinter choo",
				"SublimeLinter: Choose Gutter Theme"
			],
			[
				"set syntax ruby",
				"Set Syntax: Ruby"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"package  control disable package",
				"Package Control: Disable Package"
			],
			[
				"set syntax: stylus",
				"Set Syntax: Stylus"
			],
			[
				"packagecontrol",
				"Package Control: Discover Packages"
			],
			[
				"setsyntax groovy",
				"Set Syntax: Groovy"
			]
		],
		"width": 435.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/images",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/input-field-controls",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/searchtypes",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/routes",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/templates",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/vendor",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/styles"
	],
	"file_history":
	[
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/templates/search-controls.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/typeahead.js/test/search_index_spec.js",
		"/home/mbowen/projects/hpi/trunk/code/Gruntfile.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/dist/scripts/3fdb842e.main.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/marionette/upgradeGuide.md",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/Gruntfile.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery/src/ajax/parseJSON.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/test/environment.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/bootstrap-sass-official/assets/stylesheets/bootstrap/_responsive-embed.scss",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/robots.txt",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/feature-detects/script-async.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/searchtypes/search-artist.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.UriCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/feature-detects/url-data-uri.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/underscore/underscore.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/lib/backbone.paginator.min.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/test/coverage/lib/backbone.paginator.js.html",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/js/extensions/paginator/backgrid-paginator.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/css/extensions/paginator/backgrid-paginator.css",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/js/extensions/paginator/backgrid-paginator.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/css/extensions/paginator/backgrid-paginator.css",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/lib/backbone-pageable.min.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/lib/backbone-pageable.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone/backbone.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/package.json",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone-pageable/examples/js/backgrid.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/js/backgrid.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/lib/backgrid.min.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Body.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Cell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Column.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Columns.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Command.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Footer.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Grid.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Header.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.Row.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.BooleanCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.CellEditor.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.CellFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.DateCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.DatetimeCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.DatetimeFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.EmailCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.EmailFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.EmptyRow.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.HeaderCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.HeaderRow.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.IntegerCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.NumberCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.NumberFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.PercentCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.PercentFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.SelectCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.SelectFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.StringCell.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/lib/backgrid.css",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/feature-detects/battery-api.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/api/output/Backgrid.StringFormatter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/lib/backgrid.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search-program.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/index.html",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search/search-program.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search/search-composerwork.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search/search.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/input-field-controls/control-dropdown.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/input-field-controls/control-datepicker.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search-results.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/search-composerwork.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/bootstrap-sass-official/composer.json",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone/component.json",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/feature-detects/css-objectfit.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone/CNAME",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/performancehistory.sublime-project",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/.tmp/scripts/templates.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/.sass-cache/11e2664a46256a4ffe4fb2588534429fee64d3d2/_text-emphasis.scssc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/uglify-js/test/compress/drop-unused.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/front-end-housekeeping/historytest/js/config.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery/src/var/arr.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/marionette/api/controller.jsdoc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backgrid/CONTRIBUTORS",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/typeahead.js/src/typeahead/dropdown.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/.sass-cache/a9dc744da0cb267df56fa0348bc923f26149df22/_dropdowns.scssc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/droppable.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/i18n/datepicker-ro.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/i18n/datepicker-rm.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/templates/dateview.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/datepicker.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/i18n/datepicker-ta.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/api/data-ad66463f722364e147dc745bab434c12.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/jquery-ui/ui/progressbar.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/node_modules/grunt/node_modules/glob/test/pause-resume.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/front-end-housekeeping/historytest/index.html",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/routes/home.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/lib/backbone.paginator.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/front-end-housekeeping/historytest/js/backbone.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/node_modules/grunt-contrib-compass/node_modules/bin-version-check/node_modules/minimist/test/stop_early.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/node_modules/jshint-stylish/stylish.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/node_modules/grunt-contrib-imagemin/node_modules/imagemin/node_modules/imagemin-gifsicle/node_modules/gifsicle/node_modules/bin-wrapper/node_modules/download/node_modules/decompress-tar/node_modules/tar-stream/node_modules/xtend/.jshintrc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules/control-dropdown.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/bower.json",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/.sass-cache/11e2664a46256a4ffe4fb2588534429fee64d3d2/_pagination.scssc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/modernizr/feature-detects/pointerlock-api.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.paginator/examples/json/pageable-territories.json",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/.sass-cache/a9dc744da0cb267df56fa0348bc923f26149df22/_pager.scssc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.babysitter/lib/backbone.babysitter.min.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/bower_components/backbone.babysitter/lib/backbone.babysitter.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/templates/search-program.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/routes/home.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/modules/search-controls.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/Gruntfile.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/search-program.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/search-controls-content.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/search-controls-tab.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/search-controls.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/index.html",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/main.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/node_modules/grunt-contrib-compass/node_modules/bin-version-check/node_modules/minimist/test/stop_early.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/node_modules/jshint-stylish/stylish.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/node_modules/grunt-contrib-imagemin/node_modules/imagemin/node_modules/imagemin-gifsicle/node_modules/gifsicle/node_modules/bin-build/node_modules/download/node_modules/rc/LICENSE.APACHE2",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/node_modules/connect-livereload/LICENSE",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/layout.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/styles/main.scss",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/scripts/templates/layout-standard.ejs",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/node_modules/load-grunt-tasks/load-grunt-tasks.js",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/.jshintrc",
		"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory-backbone/app/bower_components/jquery/src/var/hasOwn.js"
	],
	"find":
	{
		"height": 55.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"",
			"/home/mbowen/projects/nyphil/vagrant/code/nyphil/performancehistory/app/scripts/modules",
			"<open folders>",
			"<open folders>,*.html",
			"<open folders>",
			"<open folders>,*.styl",
			"<open folders>,-<",
			"<open folders>",
			"/home/mbowen/projects/ascp/ASCPedia/ascpedia_v2.0/hpi-wrapper/hpi/overlays/ascp-prod/WEB-INF/config",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"worktitle_facet",
			"copy",
			"bootstrap",
			"copy",
			"cssmin",
			"tmp/styles",
			"compass",
			" ",
			"compass",
			"mountFolder",
			"connect.static",
			"test",
			"lrSnippet",
			"SearchTabView",
			"events",
			"SearchControlsLayout",
			"uglify",
			"rev",
			"uglify",
			"useminPrepare",
			"concat",
			"usemin",
			"<%=",
			"<%",
			"JST",
			"with",
			"artist_facet",
			"addLuceneUserQueryParameters",
			"userQueryParameters",
			"dismaxQValue",
			"getLuceneQuery",
			"dismaxQValue",
			"StringCell",
			"URICell",
			"Backgrid.CellFormatter",
			"CellFormatter",
			"StringFormatter",
			"_convert",
			"StringFormatter",
			"uricell",
			"fetch",
			"fieldAttrName",
			"fieldAttrNames",
			"userQueryParamters",
			"getLuceneQuery",
			"StringFormatter",
			"StringCell",
			"dismax",
			"standard",
			"dismax",
			"fetch",
			"facets",
			"addFacetField",
			"_isFunction",
			"queryParams",
			"rendered",
			"queryParams",
			"serve",
			"mountFOlder",
			"connect",
			"ProgramSearch",
			"watch",
			"jst",
			"jST",
			"onInput",
			"press",
			"bloodhound",
			"Bloodhound",
			"soloistsNames",
			"        $",
			"ttAdapter",
			"adapter",
			"nonword",
			"tokenizers",
			"fetch",
			"parse",
			"artist",
			"name=\"text",
			"_getSearchResults",
			"getSearchResults",
			"_getXmlObject",
			"getSearchResults",
			"_getSearchResults",
			"core.styl",
			"client.",
			"handlebars",
			"requirejs",
			"handlebars",
			"templates",
			".html",
			"loginName",
			"app.user",
			"jqueryui",
			"jquery-ui",
			"jquery",
			"libs/jquery",
			"jquery",
			"libs/jquery",
			"mockjquery",
			"defaultActionConfigs",
			"actionModules",
			"getAllRegisteredActionConfigs\n",
			"getAllRegisteredActionConfigs",
			"getAllRegistered",
			"nocontext",
			"bulkupload",
			"ie8",
			"bootstrap",
			"ie8",
			"validationMessage",
			"searchsidebar-numResults",
			"modal",
			"showObjectText",
			"cleanup",
			"fade",
			"notifications",
			"Notifications.View",
			"showPanes",
			"refresh",
			"onModalHidden",
			"stylus",
			"buildRuntimeConfig",
			"woff",
			"ttf",
			"compress",
			"h5",
			"glyphicons",
			"actions"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"localhost",
			"",
			",",
			", label: '",
			", '",
			"' },",
			" },"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 16,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/scripts/modules/search-controls.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3933,
						"regions":
						{
						},
						"selection":
						[
							[
								538,
								538
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 97.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/scripts/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 479,
						"regions":
						{
						},
						"selection":
						[
							[
								126,
								126
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/mbowen/projects/hpi/trunk/code/app/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4649,
						"regions":
						{
						},
						"selection":
						[
							[
								3551,
								3551
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 1782.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "app/scripts/modules/search.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7672,
						"regions":
						{
						},
						"selection":
						[
							[
								549,
								549
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/mbowen/projects/ascp/misc/ssl-apache-test.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2349,
						"regions":
						{
						},
						"selection":
						[
							[
								1202,
								1202
							]
						],
						"settings":
						{
							"auto_name": "<VirtualHost *:80>",
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage",
							"tab_size": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "app/scripts/modules/searchtypes/search-artist.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 747,
						"regions":
						{
						},
						"selection":
						[
							[
								395,
								395
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "app/scripts/modules/searchtypes/search-program.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1831,
						"regions":
						{
						},
						"selection":
						[
							[
								884,
								884
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "app/bower_components/backbone.paginator/lib/backbone.paginator.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48481,
						"regions":
						{
						},
						"selection":
						[
							[
								10471,
								10471
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4743.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "app/scripts/modules/input-field-controls/abstract-control.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1189,
						"regions":
						{
						},
						"selection":
						[
							[
								361,
								361
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "app/scripts/modules/input-field-controls/control-dropdown.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2132,
						"regions":
						{
						},
						"selection":
						[
							[
								746,
								746
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "app/scripts/modules/input-field-controls/control-typeahead.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3104,
						"regions":
						{
						},
						"selection":
						[
							[
								1306,
								1306
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 540.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "app/scripts/modules/search-results.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4702,
						"regions":
						{
						},
						"selection":
						[
							[
								4459,
								4459
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2013.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "app/bower_components/backgrid/lib/backgrid.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 85457,
						"regions":
						{
						},
						"selection":
						[
							[
								25693,
								25693
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15171.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "app/scripts/routes/home.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2069,
						"regions":
						{
						},
						"selection":
						[
							[
								963,
								963
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "Gruntfile.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11509,
						"regions":
						{
						},
						"selection":
						[
							[
								2458,
								2458
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1131.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 15,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36930,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										198,
										201
									],
									[
										401,
										404
									],
									[
										462,
										465
									],
									[
										535,
										538
									],
									[
										608,
										611
									],
									[
										678,
										681
									],
									[
										764,
										767
									],
									[
										990,
										993
									],
									[
										1205,
										1208
									],
									[
										1330,
										1333
									],
									[
										1462,
										1465
									],
									[
										1633,
										1636
									],
									[
										1696,
										1699
									],
									[
										1929,
										1932
									],
									[
										2116,
										2119
									],
									[
										2224,
										2227
									],
									[
										2291,
										2294
									],
									[
										2353,
										2356
									],
									[
										2422,
										2425
									],
									[
										2609,
										2612
									],
									[
										2700,
										2703
									],
									[
										2811,
										2814
									],
									[
										2871,
										2874
									],
									[
										2972,
										2975
									],
									[
										3145,
										3148
									],
									[
										3263,
										3266
									],
									[
										3430,
										3433
									],
									[
										3558,
										3561
									],
									[
										3762,
										3765
									],
									[
										3858,
										3861
									],
									[
										4043,
										4046
									],
									[
										4097,
										4100
									],
									[
										4351,
										4354
									],
									[
										4550,
										4553
									],
									[
										4747,
										4750
									],
									[
										4818,
										4821
									],
									[
										4889,
										4892
									],
									[
										5353,
										5356
									],
									[
										5745,
										5748
									],
									[
										6338,
										6341
									],
									[
										6357,
										6360
									],
									[
										6812,
										6815
									],
									[
										7106,
										7109
									],
									[
										7256,
										7259
									],
									[
										7336,
										7339
									],
									[
										7572,
										7575
									],
									[
										7667,
										7670
									],
									[
										7718,
										7721
									],
									[
										7850,
										7853
									],
									[
										7927,
										7930
									],
									[
										7978,
										7981
									],
									[
										8111,
										8114
									],
									[
										8414,
										8417
									],
									[
										8735,
										8738
									],
									[
										9098,
										9101
									],
									[
										9491,
										9494
									],
									[
										10085,
										10088
									],
									[
										10104,
										10107
									],
									[
										10560,
										10563
									],
									[
										10849,
										10852
									],
									[
										11031,
										11034
									],
									[
										11111,
										11114
									],
									[
										11347,
										11350
									],
									[
										11442,
										11445
									],
									[
										11493,
										11496
									],
									[
										11625,
										11628
									],
									[
										11702,
										11705
									],
									[
										11753,
										11756
									],
									[
										11886,
										11889
									],
									[
										12013,
										12016
									],
									[
										12380,
										12383
									],
									[
										12674,
										12677
									],
									[
										12947,
										12950
									],
									[
										12990,
										12993
									],
									[
										13059,
										13062
									],
									[
										13095,
										13098
									],
									[
										13463,
										13466
									],
									[
										13992,
										13995
									],
									[
										14361,
										14364
									],
									[
										14702,
										14705
									],
									[
										14810,
										14813
									],
									[
										15022,
										15025
									],
									[
										15208,
										15211
									],
									[
										15390,
										15393
									],
									[
										15571,
										15574
									],
									[
										15736,
										15739
									],
									[
										15923,
										15926
									],
									[
										16106,
										16109
									],
									[
										16272,
										16275
									],
									[
										16343,
										16346
									],
									[
										16464,
										16467
									],
									[
										16688,
										16691
									],
									[
										16791,
										16794
									],
									[
										16884,
										16887
									],
									[
										16998,
										17001
									],
									[
										17250,
										17253
									],
									[
										17424,
										17427
									],
									[
										30333,
										30336
									],
									[
										32163,
										32166
									],
									[
										32439,
										32442
									],
									[
										32698,
										32701
									],
									[
										33007,
										33010
									],
									[
										33171,
										33174
									],
									[
										33445,
										33448
									],
									[
										33832,
										33835
									],
									[
										34164,
										34167
									],
									[
										34181,
										34184
									],
									[
										34279,
										34282
									],
									[
										34553,
										34556
									],
									[
										34772,
										34775
									],
									[
										35011,
										35014
									],
									[
										35217,
										35220
									],
									[
										35426,
										35429
									],
									[
										35661,
										35664
									],
									[
										35899,
										35902
									],
									[
										36174,
										36177
									],
									[
										36386,
										36389
									],
									[
										36470,
										36473
									],
									[
										36783,
										36798
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								36657,
								36657
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 11520.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "app/scripts/modules/searchtypes/search-composer-work.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1045,
						"regions":
						{
						},
						"selection":
						[
							[
								1032,
								1032
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "app/styles/main.scss",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 285,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5298,
						"regions":
						{
						},
						"selection":
						[
							[
								539,
								539
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "app/styles/style.css",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1419,
						"regions":
						{
							"gutter_color_1070":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ddd.png",
								"regions":
								[
									[
										1070,
										1096
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1111":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#d9534f.png",
								"regions":
								[
									[
										1111,
										1130
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1155":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#d9534f.png",
								"regions":
								[
									[
										1155,
										1174
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_1256":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#d9534f.png",
								"regions":
								[
									[
										1256,
										1286
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_130":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ccc.png",
								"regions":
								[
									[
										130,
										157
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_216":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/rgba(0, 0, 0, 0.075).png",
								"regions":
								[
									[
										216,
										269
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_284":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#999.png",
								"regions":
								[
									[
										284,
										299
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_382":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#fff.png",
								"regions":
								[
									[
										382,
										409
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_410":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ccc.png",
								"regions":
								[
									[
										410,
										437
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_438":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/rgba(0, 0, 0, 0.2).png",
								"regions":
								[
									[
										438,
										479
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_667":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#fff.png",
								"regions":
								[
									[
										667,
										683
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_684":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#0097cf.png",
								"regions":
								[
									[
										684,
										714
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_917":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ddd.png",
								"regions":
								[
									[
										917,
										950
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_951":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ddd.png",
								"regions":
								[
									[
										951,
										983
									]
								],
								"scope": "gutter_color"
							},
							"gutter_color_984":
							{
								"flags": 144,
								"icon": "Cache/GutterColor/#ddd.png",
								"regions":
								[
									[
										984,
										1015
									]
								],
								"scope": "gutter_color"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "bower.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 474,
						"regions":
						{
						},
						"selection":
						[
							[
								342,
								342
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "app/scripts/modules/search/search-controls.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2943,
						"regions":
						{
						},
						"selection":
						[
							[
								2202,
								2202
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 918.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "performancehistory.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"grunfile.js",
				"Gruntfile.js"
			],
			[
				"index.html",
				"app/index.html"
			],
			[
				"gruntfile.js",
				"Gruntfile.js"
			],
			[
				"searchresults.js",
				"app/scripts/modules/search-results.js"
			],
			[
				"home.js",
				"app/scripts/routes/home.js"
			],
			[
				"main.js",
				"app/scripts/main.js"
			],
			[
				"search.js",
				"app/scripts/modules/search.js"
			],
			[
				"gurntfile.js",
				"Gruntfile.js"
			],
			[
				"results",
				"app/scripts/modules/search-results.js"
			],
			[
				"backgrid.js",
				"app/bower_components/backgrid/lib/backgrid.js"
			],
			[
				"backbone.paginator.js",
				"app/bower_components/backbone.paginator/lib/backbone.paginator.js"
			],
			[
				"backgrid.stringcell.js",
				"app/bower_components/backgrid/api/output/Backgrid.StringCell.js"
			],
			[
				"control-drop",
				"performancehistory/app/scripts/modules/input-field-controls/control-dropdown.js"
			],
			[
				"search-program.js",
				"performancehistory/app/scripts/modules/search-program.js"
			],
			[
				"control-date",
				"performancehistory/app/scripts/modules/input-field-controls/control-datepicker.js"
			],
			[
				"program",
				"performancehistory/app/scripts/modules/search-program.js"
			],
			[
				"",
				"performancehistory/app/bower_components/backbone.paginator/lib/backbone.paginator.js"
			],
			[
				"searchcontrols",
				"performancehistory/app/scripts/modules/search-controls.js"
			],
			[
				"paginator",
				"performancehistory/app/bower_components/backbone.paginator/lib/backbone.paginator.js"
			],
			[
				"paginator.js",
				"app/bower_components/backbone.paginator/lib/backbone.paginator.js"
			],
			[
				"search-results",
				"app/scripts/modules/search-results.js"
			],
			[
				"gruntfile",
				"Gruntfile.js"
			],
			[
				"searchct",
				"app/scripts/templates/search-controls.ejs"
			],
			[
				"layout.ejs",
				"app/scripts/templates/layout.ejs"
			],
			[
				"grutnfile.js",
				"Gruntfile.js"
			],
			[
				"routes.php",
				"system/application/config/routes.php"
			],
			[
				"config.js",
				"historytest/js/config.js"
			],
			[
				"search.php",
				"system/application/controllers/search.php"
			],
			[
				"schema.xml",
				"solr/multicore/assets/conf/schema.xml"
			],
			[
				"config.php",
				"system/application/config/config.php"
			],
			[
				"typeahead.b",
				"historytest/js/typeahead.bundle.js"
			],
			[
				"backbone.js",
				"historytest/js/backbone.js"
			],
			[
				"index.hml",
				"historytest/index.html"
			],
			[
				"my",
				"system/application/libraries/MY_Controller.php"
			],
			[
				"environem",
				"system/application/config/environment-config.php"
			],
			[
				"core.styl",
				"assets/css/styles/core.styl"
			],
			[
				"hpi.styl",
				"assets/css/styles/hpi.styl"
			],
			[
				"index.css",
				"assets/css/index.css"
			],
			[
				"grunt",
				"Gruntfile.js"
			],
			[
				"app.js",
				"app/app.js"
			],
			[
				"context.js",
				"app/context.js"
			],
			[
				"config-core.js",
				"app/configs/config-core.js"
			],
			[
				"test-main.js",
				"test/test-main.js"
			],
			[
				"mockjquery.js",
				"test/mockjquery.js"
			],
			[
				"searchrouter",
				"test/tests/searchRouterSpec.js"
			],
			[
				"spec",
				"BUILD/test/tests/common/ocSpec.js"
			],
			[
				"actionmodules.js",
				"app/modules/actions/actionmodules.js"
			],
			[
				"action",
				"app/configs/config-actions.js"
			],
			[
				"index.jsp",
				"hpi-wrapper/hpi/src/main/webapp/WEB-INF/jsp/index.jsp"
			],
			[
				"ie8.js",
				"BUILD/app/modules/ie/ie8.js"
			],
			[
				"header.html",
				"app/templates/header.html"
			],
			[
				"respond.js",
				"assets/js/libs/respond.js"
			],
			[
				"formsupport.styl",
				"assets/css/styles/formsupport/formSupport.styl"
			],
			[
				"formsupport.html",
				"app/templates/formsupport.html"
			],
			[
				"search.styl",
				"assets/css/styles/search/search.styl"
			],
			[
				"gridview.html",
				"app/templates/search/gridview.html"
			],
			[
				"header.styl",
				"assets/css/styles/header.styl"
			],
			[
				"actionscore.styl",
				"assets/css/styles/actions/actionsCore.styl"
			],
			[
				"npm.js",
				"assets/js/bootstrap/js/npm.js"
			],
			[
				"alert.js",
				"app/modules/common/alert/alert.js"
			],
			[
				"item.html",
				"app/templates/common/alert/item.html"
			],
			[
				"stage.js",
				"app/modules/stage/stage.js"
			],
			[
				"modal",
				"app/modules/common/modalactionhandler.js"
			],
			[
				"iconservice.js",
				"app/modules/common/iconservice.js"
			],
			[
				"searchresultcontrols.js",
				"app/modules/search/searchresultcontrols.js"
			],
			[
				"modalactionhandler.js",
				"app/modules/common/modalactionhandler.js"
			],
			[
				"glyphicons.css",
				"assets/vendor/glyphicons/glyphicons.css"
			],
			[
				"tracconfig-trac.html",
				"app/templates/hpiadmin/tracconfig/tracconfig-trac.html"
			],
			[
				"tracconfig.html",
				"app/templates/hpiadmin/tracconfig/tracconfig-layout.html"
			],
			[
				"tracconfig.js",
				"app/modules/hpiadmin/tracconfig/tracconfig.js"
			],
			[
				"login.html",
				"app/templates/login.html"
			],
			[
				"layout-2-col.html",
				"app/templates/layout-2-col.html"
			],
			[
				"stageinfo.js",
				"app/modules/stage/stageinfo.js"
			],
			[
				"aldine.json",
				"project/alfresco/env/aldine/aldine.json"
			],
			[
				"action.js",
				"app/modules/common/action.js"
			],
			[
				"gridview.js",
				"app/modules/search/gridview.js"
			],
			[
				"oc.js",
				"app/modules/common/oc.js"
			],
			[
				"router.js",
				"app/router.js"
			],
			[
				"backbone.layoutmanager",
				"assets/js/plugins/backbone.layoutmanager.js"
			],
			[
				"backbone.alyout",
				"BUILD/compressed/plugins/backbone.layoutmanager.js"
			],
			[
				"searchspec",
				"test/tests/modules/search/searchresultcontrolsSpec.js"
			],
			[
				"searchresultcont",
				"app/modules/search/searchresultcontrols.js"
			],
			[
				"ocspec",
				"test/tests/common/ocSpec.js"
			],
			[
				"vagrantfile",
				"vagrant/Vagrantfile"
			],
			[
				"apply_amps",
				"common/vendor-cookbooks/alfresco/recipes/apply_amps.rb"
			],
			[
				"apply_amps.rb",
				"common/vendor-cookbooks/alfresco/templates/default/apply_amps.sh.erb"
			],
			[
				"deploy.sh",
				"vagrant/deploy.sh"
			],
			[
				"mainjs",
				"code/app/main.js"
			],
			[
				"detailview.js",
				"code/app/modules/detailview/detailview.js"
			],
			[
				"searchrouter.js",
				"code/app/searchrouter.js"
			],
			[
				"ocquery.js",
				"code/app/modules/common/ocquery.js"
			],
			[
				"backbone-pageable.js",
				"code/assets/js/libs/backbone-pageable.js"
			],
			[
				"require.js",
				"code/DIST/require.js"
			],
			[
				"backbone-page",
				"code/BUILD/compressed/libs/backbone-pageable.js"
			],
			[
				"wizard.js",
				"code/app/modules/wizard/wizard.js"
			],
			[
				"formsupportspec",
				"code/test/tests/common/formSupportSpec.js"
			],
			[
				"formsupport.js",
				"code/app/modules/formsupport.js"
			],
			[
				"reassign",
				"code/app/modules/actions/reassignworkflowtask.js"
			],
			[
				"delegatework",
				"code/app/modules/actions/delegateworkflowtask.js"
			],
			[
				"tracconfig-trac",
				"code/app/templates/hpiadmin/tracconfig/tracconfig-trac.html"
			],
			[
				"viewerframe.php",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/controllers/viewerframe.php"
			],
			[
				"dragscrollable.js",
				"vagrant/code/nyphil/front-end-housekeeping/bookreader/dragscrollable.js"
			],
			[
				"environment-config",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/config/environment-config.php"
			],
			[
				"search-results-grid.php",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/views/search-results-grid.php"
			],
			[
				"nypviewer.css",
				"vagrant/code/nyphil/front-end-housekeeping/bookreader/nypviewer.css"
			],
			[
				"bookreader.js",
				"vagrant/code/nyphil/front-end-housekeeping/bookreader/BookReader.js"
			],
			[
				"nypviewer.js",
				"vagrant/code/nyphil/front-end-housekeeping/bookreader/nypviewer.js"
			],
			[
				"environemnt",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/config/environment-config.php"
			],
			[
				"booksearchtext",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/controllers/booksearchtext.php"
			],
			[
				"nypviewer",
				"vagrant/code/nyphil/front-end-housekeeping/bookreader/nypviewer.js"
			],
			[
				"bookcreate.get.desc.xml",
				"vagrant/code/nyphil/nyphilAmp/config/alfresco/extension/templates/webscripts/com/tsgrp/nypBookCreate.get.desc.xml"
			],
			[
				"booksearch.php",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/controllers/booksearch.php"
			],
			[
				"envrion",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/config/environment-config.php"
			],
			[
				"my_con",
				"vagrant/code/nyphil/front-end-housekeeping/system/application/libraries/MY_Controller.php"
			],
			[
				"tsgvagrant.sh",
				"vagrant/tsgvagrant.sh"
			],
			[
				"typography.html",
				"code/app/templates/styleguide/css/typography.html"
			],
			[
				"styleguide.js",
				"code/app/modules/styleguide/styleguide.js"
			],
			[
				"security.js",
				"code/app/modules/common/security.js"
			],
			[
				"karma.conf.js",
				"code/karma.conf.js"
			],
			[
				"package.json",
				"code/package.json"
			],
			[
				"indexcontroller.java",
				"code/hpi-wrapper/hpi/src/main/java/com/tsgrp/hpi/IndexController.java"
			],
			[
				"appcontext",
				"code/app/context.js"
			],
			[
				"adminrouterspec.js",
				"code/test/tests/adminRouterSpec.js"
			],
			[
				"adminrouter.js",
				"code/app/adminrouter.js"
			],
			[
				"formtypeatt",
				"code/app/templates/hpiadmin/formconfig/formtypeattrcontrol.html"
			],
			[
				"formtypeattrcontrol.html",
				"code/app/templates/hpiadmin/formconfig/formtypeattrcontrol.html"
			],
			[
				"admin-tabs",
				"code/app/templates/hpiadmin/admin-layout-tabs.html"
			],
			[
				"formtypemodel.html",
				"code/app/templates/hpiadmin/formconfig/formtypemodel.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 368.0,
		"selected_items":
		[
		],
		"width": 669.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 417.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
